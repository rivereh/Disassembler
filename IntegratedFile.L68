00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/9/2021 2:53:11 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : DISASSEMBLER
00000000                             3  * Written by : Ani, Ashlyn, Evan, River
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00001000                             9  START       ORG    $1000
00001000                            10  
00001000                            11  
00001000                            12  
00001000                            13  START_PRG 
00001000  4240                      14              CLR     D0
00001002  4241                      15              CLR     D1
00001004  4242                      16              CLR     D2
00001006  4243                      17              CLR     D3
00001008  4244                      18              CLR     D4
0000100A  4245                      19              CLR     D5         
0000100C  43F9 00003232             20              LEA     DIRECTIONS,A1   * Loads first address prompt into A1
00001012  103C 000E                 21              MOVE.B  #14,D0          * Move 14 in D0 to prompt user
00001016  4E4F                      22              TRAP    #15             * Prompt user
00001018                            23              
00001018                            24               
00001018  43F9 0000326E             25              LEA     PROMPT1,A1      * Loads first address prompt into A1
0000101E  103C 000E                 26              MOVE.B  #14,D0          * Move 14 in D0 to prompt user
00001022  4E4F                      27              TRAP    #15             * Prompt user
00001024                            28     
00001024  227C 00000900             29              MOVE.L  #$900,A1       * NEW
0000102A  103C 0002                 30              MOVE.B  #2,D0           * Move 2 into D0
0000102E  4E4F                      31              TRAP    #15             * Read input from user and store it in A1
00001030                            32              
00001030  2049                      33              MOVEA.L A1,A0           * Move our first number recieved into A0
00001032                            34              
00001032  43F9 00003286             35              LEA     PROMPT2,A1      * Loads second address prompt into A1
00001038  103C 000E                 36              MOVE.B  #14,D0          * Move 14 in D0 to prompt user
0000103C  4E4F                      37              TRAP    #15             * Prompt user
0000103E                            38              
0000103E  227C 00000910             39              MOVE.L  #$910,A1       * NEW
00001044  103C 0002                 40              MOVE.B  #2,D0           * Move 2 into D0
00001048  4E4F                      41              TRAP    #15             * Read input from user and store it in A1
0000104A                            42              
0000104A  183C 0000                 43              MOVE.B  #0,D4
0000104E  1A3C 0006                 44              MOVE.B  #6,D5
00001052                            45  
00001052                            46  * -----------Convert Ascii into Hex  (1st Address)-----------
00001052                            47  CONVERTHEX1        
00001052  4241                      48              CLR     D1              * Clear regiters to prepare for conversion
00001054  BA04                      49              CMP.B   D4,D5           * Check counter in D4 and D5, if counter = 4 we stop
00001056  6700 002C                 50              BEQ     INITHEX2
0000105A                            51              
0000105A  1218                      52              MOVE.B  (A0)+,D1        * Move our ascii byte into D1
0000105C  0C01 0040                 53              CMPI.B  #$40,D1         * Compare to 40 (if <40 = number OR if   >40 = character)
00001060  6D00 0006                 54              BLT     NUMBER1         * If < then convert as number
00001064  6000 000A                 55              BRA     CHARACTER1      * Always branch to character since we know its not a number
00001068                            56              
00001068                            57  NUMBER1     
00001068  0401 0030                 58              SUB.B   #$30,D1         * Subtract 30 from the ascii value to get hex value
0000106C  6000 0006                 59              BRA     COMBINE1        * Branch to figure out next number
00001070                            60              
00001070                            61  CHARACTER1   
00001070  0401 0037                 62              SUB.B   #$37,D1         * Subtract 37 from the ascii value to get hex value
00001074                            63              
00001074                            64  COMBINE1     
00001074  D401                      65              ADD.B  D1,D2            * Add D1 and D2 together (combines our hex value
00001076                            66              
00001076  0C04 0005                 67              CMPI.B  #5,D4           * Compare our counter to 3 if here we dont need to shift our final hex number
0000107A  6700 0008                 68              BEQ     INITHEX2        * And we go ahead and branch
0000107E                            69              
0000107E  E98A                      70              LSL.L   #4,D2           * Shift D2 (our hex number) by 8 to make room for rest of hex number conversion
00001080                            71              
00001080  5204                      72              ADD.B   #1,D4           * Add 1 to our counter in D4
00001082  60CE                      73              BRA     CONVERTHEX1     * Loop back up
00001084                            74            
00001084                            75              * D1,D2 used. D1 = temp, D2 = holds first starting address
00001084                            76              * D4,D5 = counters
00001084                            77  INITHEX2
00001084  183C 0000                 78              MOVE.B  #0,D4
00001088  1A3C 0006                 79              MOVE.B  #6,D5
0000108C                            80              
0000108C                            81  CONVERTHEX2
0000108C  4241                      82              CLR     D1              * Clear regiters to prepare for conversion
0000108E  BA04                      83              CMP.B   D4,D5           * Check counter in D4 and D5, if counter = 4 we stop
00001090  6700 002C                 84              BEQ     CHECK
00001094                            85              
00001094  1219                      86              MOVE.B  (A1)+,D1        * Move our ascii byte into D1
00001096  0C01 0040                 87              CMPI.B  #$40,D1         * Compare to 40 (if <40 = number OR if   >40 = character)
0000109A  6D00 0006                 88              BLT     NUMBER2         * If < then convert as number
0000109E  6000 000A                 89              BRA     CHARACTER2      * Always branch to character since we know its not a number
000010A2                            90              
000010A2                            91  NUMBER2     
000010A2  0401 0030                 92              SUB.B   #$30,D1         * Subtract 30 from the ascii value to get hex value
000010A6  6000 0006                 93              BRA     COMBINE2        * Branch to figure out next number
000010AA                            94              
000010AA                            95  CHARACTER2   
000010AA  0401 0037                 96              SUB.B   #$37,D1         * Subtract 37 from the ascii value to get hex value
000010AE                            97              
000010AE                            98  COMBINE2     
000010AE  D601                      99              ADD.B  D1,D3            * Add D1 and D2 together (combines our hex value
000010B0                           100              
000010B0  0C04 0005                101              CMPI.B  #5,D4           * Compare our counter to 3 if here we dont need to shift our final hex number
000010B4  6700 0008                102              BEQ     CHECK            * And we go ahead and branch
000010B8                           103              
000010B8  E98B                     104              LSL.L   #4,D3           * Shift D2 (our hex number) by 8 to make room for rest of hex number conversion
000010BA                           105              
000010BA  5204                     106              ADD.B   #1,D4           * Add 1 to our counter in D4
000010BC  60CE                     107              BRA     CONVERTHEX2     * Loop back up
000010BE                           108            
000010BE                           109              * D1,D3 used. D1 = temp, D3 = holds ENDING address
000010BE                           110              * D4,D5 = counters
000010BE                           111              
000010BE                           112  *Input Checking
000010BE                           113  CHECK
000010BE  B682                     114              CMP.L   D2,D3
000010C0  6700 002C                115              BEQ     INPUT_ERR
000010C4  B682                     116              CMP.L   D2,D3           *make sure starting adress isn't greater than ending
000010C6  6D00 0026                117              BLT     INPUT_ERR
000010CA  1C02                     118              MOVE.B  D2,D6           *get last byte to check if number even or odd (big divisions are bad)
000010CC  1E03                     119              MOVE.B  D3,D7
000010CE  8DFC 0002                120              DIVS.W  #$2,D6          *Divide to see what remainder/modulous is
000010D2  4846                     121              SWAP    D6              *remainder gets stored in upper word so swap swaps it to the lower word
000010D4  BC3C 0001                122              CMP.B   #$01,D6
000010D8  6700 0014                123              BEQ     INPUT_ERR         *odd input error
000010DC  8FFC 0002                124              DIVS.W  #$2,D7
000010E0  4847                     125              SWAP    D7
000010E2  BE3C 0001                126              CMP.B   #$01,D7
000010E6  6700 0006                127              BEQ     INPUT_ERR
000010EA  6000 0026                128              BRA     DONE
000010EE                           129  INPUT_ERR
000010EE  43F9 000033E6            130              LEA     BLANK,A1
000010F4  103C 000E                131              MOVE.B  #14,D0
000010F8  4E4F                     132              TRAP    #15
000010FA                           133  
000010FA  43F9 0000329D            134              LEA     ERROR_MSG,A1
00001100  4E4F                     135              TRAP    #15
00001102                           136              
00001102  43F9 000033E6            137              LEA     BLANK,A1
00001108  103C 000E                138              MOVE.B  #14,D0
0000110C  4E4F                     139              TRAP    #15
0000110E                           140  
0000110E                           141              
0000110E  6000 FEF0                142              BRA     START_PRG
00001112                           143  
00001112                           144                   
00001112                           145  *------INIT MEM LOOP-------  
00001112                           146  DONE            
00001112  23C2 000033EA            147              MOVE.L  D2,BEGIN        *put adsresses in variable in order to put in addr register
00001118  23C3 000033EE            148              MOVE.L  D3,FIN
0000111E  2479 000033EA            149              MOVEA.L  BEGIN,A2       *Move to address registers
00001124  2679 000033EE            150              MOVEA.L  FIN,A3            
0000112A                           151  
0000112A                           152  
0000112A                           153  
0000112A                           154  MAIN_LOOP
0000112A  4286                     155              CLR.L     D6
0000112C  284A                     156              MOVEA.L A2,A4
0000112E  B5CB                     157              CMPA.L  A3,A2           * Check are we done
00001130  6C00 20D2                158              BGE     END             
00001134  3E12                     159              MOVE.W  (A2),D7         * Get instruction as a word
00001136  BE7C 4E75                160              CMP.W   #$4E75,D7       * Check if RTS instruction
0000113A  6700 013E                161              BEQ     MATCH_RTS
0000113E                           162              
0000113E  BE7C 4E71                163              CMP.W   #$4E71,D7       * Check if NOP instruction
00001142  6700 0152                164              BEQ     MATCH_NOP
00001146                           165              
00001146  163C 0007                166              MOVE.B  #7,D3
0000114A  E66F                     167              LSR.W   D3,D7
0000114C                           168              
0000114C  BE3C 0091                169              CMP.B   #$91,D7
00001150  6700 1548                170              BEQ     MATCH_MOVEM
00001154  BE3C 0099                171              CMP.B   #$99,D7
00001158  6700 1540                172              BEQ     MATCH_MOVEM
0000115C                           173              
0000115C  3E12                     174              MOVE.W  (A2),D7
0000115E                           175              
0000115E  EC4F                     176              LSR.W   #6,D7           * Shift to get only 10 digits
00001160  BE7C 013A                177              CMP.W   #$013A,D7       * Check if it is a JSR instruction
00001164  6700 014C                178              BEQ     MATCH_JSR
00001168                           179              
00001168  BE7C 039B                180              CMP.W   #%1110011011,D7 * Check if rotate right memory 
0000116C  6700 024E                181              BEQ     MATCH_MEMROR
00001170                           182              
00001170  BE7C 039F                183              CMP.W   #%1110011111,D7 * Check if rotate left memory
00001174  6700 0280                184              BEQ     MATCH_MEMROL
00001178                           185              
00001178                           186              
00001178  BE7C 038B                187              CMP.W   #$38B,D7        * Check if right logical memory shift (had to break up becasue instruction format difference)
0000117C  6700 02B2                188              BEQ     MATCH_MEMLSHIFTR
00001180                           189              
00001180  BE7C 038F                190              CMP.W   #$38F,D7        * Check if left logical memory shift
00001184  6700 02E4                191              BEQ     MATCH_MEMLSHIFTL
00001188                           192              
00001188  BE7C 0383                193              CMP.W   #%1110000011,D7 * Check if right arithmatic memory shift (had to break up becasue instruction format diff)
0000118C  6700 0316                194              BEQ     MATCH_MEMASHIFTR
00001190                           195              
00001190  BE7C 0387                196              CMP.W   #%1110000111,D7 * Check if left arithmatic memory shift
00001194  6700 0348                197              BEQ     MATCH_MEMASHIFTL
00001198                           198              
00001198  E44F                     199              LSR.W   #2,D7           * Shift 2 bits to see 8 bits total
0000119A  BE7C 0046                200              CMP.W   #$46,D7         * Check if NOT instruction
0000119E  6700 0378                201              BEQ     MATCH_NOT
000011A2                           202              
000011A2  BE7C 0060                203              CMP.W   #$60,D7         * Check if BRA instruction
000011A6  6700 04A0                204              BEQ     MATCH_BRA
000011AA                           205              
000011AA  E84F                     206              LSR.W   #4,D7           * Shift more to see 4 bits total and if we match a normal register logical/arithmetic shift
000011AC  BE3C 000E                207              CMP.B   #$0E,D7
000011B0  6700 050A                208              BEQ     MATCH_SHIFT
000011B4                           209              
000011B4  BE3C 0007                210              CMP.B   #$7,D7
000011B8  6700 06B4                211              BEQ     MATCH_MOVEQ
000011BC                           212              
000011BC                           213              
000011BC  BE3C 000D                214              CMP.B   #$D,D7
000011C0  6700 0730                215              BEQ     MATCH_ADD
000011C4                           216              
000011C4  BE3C 0005                217              CMP.B   #$5,D7
000011C8  6700 099E                218              BEQ     MATCH_ADDQ
000011CC                           219              
000011CC  BE3C 0009                220              CMP.B   #$9,D7
000011D0  6700 0B10                221              BEQ     MATCH_SUB
000011D4                           222              
000011D4  BE3C 000C                223              CMP.B   #$C,D7
000011D8  6700 0F6A                224              BEQ     MATCH_AND
000011DC                           225              
000011DC  BE3C 0004                226              CMP.B   #$4,D7
000011E0  6700 1002                227              BEQ     MATCH_LEA
000011E4                           228              
000011E4  BE3C 0008                229              CMP.B   #$8,D7
000011E8  6700 113A                230              BEQ     MATCH_OR
000011EC                           231              
000011EC  BE3C 0006                232              CMP.B   #$06,D7         * Check if any of Branch Instructions
000011F0  6700 11D2                233              BEQ     MATCH_BCC
000011F4                           234              
000011F4  E44F                     235              LSR.W   #2,D7           *shift more to see 2 bits total
000011F6  BE3C 0000                236              CMP.B   #$0,D7
000011FA  6700 1344                237              BEQ     MATCH_MOVE
000011FE                           238  
000011FE                           239  
000011FE                           240  NOOP                                * NOOP opcode not found in current memory being read
000011FE  220A                     241              MOVE.L  A2,D1           * current memory being read that did not dissemble to readable opcode from specs
00001200  143C 0010                242              MOVE.B  #16,D2      
00001204  103C 000F                243              MOVE.B  #15,D0
00001208  4E4F                     244              TRAP    #15             * output current memory address word
0000120A                           245      
0000120A  43F9 000032FB            246              LEA     UNKNOWN,A1      * move constant DATA to A1
00001210  103C 000E                247              MOVE.B  #14,D0          * prepare to print string in (A1)
00001214  4E4F                     248              TRAP    #15             * display string in (A1)
00001216                           249              
00001216  43F9 0000330B            250              LEA     SPACE,A1        
0000121C  4E4F                     251              TRAP    #15
0000121E                           252              
0000121E  43F9 0000330B            253              LEA     SPACE,A1        * Byte displacement
00001224  103C 000E                254              MOVE.B  #14,D0
00001228  4E4F                     255              TRAP    #15
0000122A                           256              
0000122A  3212                     257              MOVE.W  (A2),D1
0000122C  143C 0010                258              MOVE.B  #16,D2
00001230  103C 000F                259              MOVE.B  #15,D0
00001234  4E4F                     260              TRAP    #15
00001236                           261              
00001236  548A                     262              ADDA.L  #2,A2
00001238                           263              
00001238                           264  INCREMENT                           * Increment the loop and continue reading opcodes        
00001238                           265              
00001238  43F9 000033E6            266              LEA     BLANK,A1        * PRINT BLANK LINE to prepare for next line
0000123E  103C 000E                267              MOVE.B  #14,D0
00001242  4E4F                     268              TRAP    #15
00001244                           269              
00001244                           270              
00001244  5205                     271              ADD.B   #1,D5
00001246  BA3C 001E                272              CMP.B   #30,D5
0000124A  6700 0006                273              BEQ     ASK_CONTINUE
0000124E                           274              
0000124E  6000 FEDA                275              BRA     MAIN_LOOP            
00001252                           276              
00001252                           277  
00001252                           278  ASK_CONTINUE
00001252  4245                     279              CLR     D5
00001254  43F9 000032C9            280              LEA     ASK,A1
0000125A  103C 000E                281              MOVE.B  #14,D0
0000125E  4E4F                     282              TRAP    #15
00001260                           283  
00001260                           284  USER_INPUT
00001260  227C 00000920            285              MOVE.L  #$920,A1        * NEW
00001266  103C 0002                286              MOVE.B  #2,D0           * Move 2 into D0
0000126A  4E4F                     287              TRAP    #15             * Read input from user and store it in A1
0000126C                           288              
0000126C  2A11                     289              MOVE.L  (A1),D5
0000126E  BA3C 000D                290              CMP.B   #$0D,D5
00001272  67EC                     291              BEQ     USER_INPUT
00001274                           292              
00001274  4245                     293              CLR     D5
00001276                           294  
00001276  6000 FEB2                295              BRA     MAIN_LOOP       * Branch back up to main loop
0000127A                           296  
0000127A                           297  
0000127A                           298  *-----------------------------------------------------------
0000127A                           299  * Test to see if we have a matching RTS op code. If so
0000127A                           300  * print out the memory address and the op code.
0000127A                           301  *-----------------------------------------------------------
0000127A                           302  MATCH_RTS
0000127A  220A                     303              MOVE.L  A2,D1
0000127C  143C 0010                304              MOVE.B  #16,D2
00001280  103C 000F                305              MOVE.B  #15,D0
00001284  4E4F                     306              TRAP    #15
00001286                           307              
00001286  43F9 000032ED            308              LEA     MSG_RTS,A1
0000128C  103C 000E                309              MOVE.B  #14,D0
00001290  4E4F                     310              TRAP    #15
00001292  548A                     311              ADDA.L  #$2,A2
00001294  60A2                     312              BRA     INCREMENT
00001296                           313              
00001296                           314              
00001296                           315  *-----------------------------------------------------------
00001296                           316  * Test to see if we have a matching NOP op code. If so
00001296                           317  * print out the memory address and the op code.
00001296                           318  *-----------------------------------------------------------
00001296                           319  MATCH_NOP
00001296  220A                     320              MOVE.L  A2,D1
00001298  143C 0010                321              MOVE.B  #16,D2
0000129C  103C 000F                322              MOVE.B  #15,D0
000012A0  4E4F                     323              TRAP    #15
000012A2                           324              
000012A2  43F9 00003361            325              LEA     MSG_NOP,A1
000012A8  103C 000E                326              MOVE.B  #14,D0
000012AC  4E4F                     327              TRAP    #15
000012AE                           328              
000012AE  548A                     329              ADDA.L  #$2,A2          * Increase counter by long
000012B0                           330              
000012B0                           331  
000012B0  6086                     332              BRA     INCREMENT      
000012B2                           333   
000012B2                           334  *-----------------------------------------------------------
000012B2                           335  * Test to see if we have a matching JSR op code. If so
000012B2                           336  * print out the memory address and the op code.
000012B2                           337  *-----------------------------------------------------------            
000012B2                           338  MATCH_JSR
000012B2  220A                     339              MOVE.L  A2,D1
000012B4  143C 0010                340              MOVE.B  #16,D2
000012B8  103C 000F                341              MOVE.B  #15,D0
000012BC  4E4F                     342              TRAP    #15
000012BE                           343              
000012BE  43F9 000032F4            344              LEA     MSG_JSR,A1
000012C4  103C 000E                345              MOVE.B  #14,D0
000012C8  4E4F                     346              TRAP    #15
000012CA                           347              
000012CA  3E12                     348              MOVE.W  (A2),D7 
000012CC  CE7C 0038                349              AND.W   #$0038,D7   *Get only 3 bits for mode
000012D0                           350              
000012D0  BE7C 0010                351              CMP.W   #$0010,D7     *see if (An) mode
000012D4  6700 001E                352              BEQ     EA_JSR_ADDREG
000012D8                           353  
000012D8  BE7C 0038                354              CMP.W   #$0038,D7     *see if ABS mode
000012DC  6700 0056                355              BEQ     VERIFY_ABS
000012E0                           356              
000012E0                           357              * NOT EA WE KNOW LOGIC HERE?
000012E0  48E7 0120                358              MOVEM.L A2/D7,-(SP)
000012E4  4EB9 000031E8            359              JSR     INVALID_EA
000012EA  4CDF 0480                360              MOVEM.L (SP)+,A2/D7
000012EE                           361              
000012EE  244C                     362              MOVEA.L A4,A2
000012F0                           363  
000012F0  6000 FF46                364              BRA     INCREMENT
000012F4                           365              
000012F4                           366  EA_JSR_ADDREG
000012F4  CC3C 0007                367              AND.B   #$07,D6     *get the last three bits for the register number
000012F8                           368              
000012F8  43F9 0000330B            369              LEA     SPACE,A1
000012FE  103C 000E                370              MOVE.B  #14,D0
00001302  4E4F                     371              TRAP    #15
00001304                           372              
00001304  43F9 000033DA            373              LEA     L_PAREN,A1
0000130A  4E4F                     374              TRAP    #15
0000130C                           375  
0000130C                           376              
0000130C  4241                     377              CLR     D1 
0000130E  43F9 000033D8            378              LEA     MSG_A,A1
00001314  4E4F                     379              TRAP    #15
00001316  1206                     380              MOVE.B  D6,D1
00001318  143C 000A                381              MOVE.B  #10,D2
0000131C  103C 000F                382              MOVE.B  #15,D0
00001320  4E4F                     383              TRAP    #15
00001322                           384              
00001322  43F9 000033DC            385              LEA     R_PAREN,A1
00001328  103C 000E                386              MOVE.B  #14,D0
0000132C  4E4F                     387              TRAP    #15
0000132E                           388              
0000132E  548A                     389              ADDA.L  #$2,A2          *increment address position
00001330  6000 FF06                390              BRA     INCREMENT
00001334                           391              
00001334                           392              
00001334                           393  VERIFY_ABS
00001334  3E12                     394              MOVE.W  (A2),D7
00001336  CE7C 0007                395              AND.W   #$0007,D7
0000133A                           396              
0000133A  BE3C 0000                397              CMP.B   #$00,D7
0000133E  6700 001E                398              BEQ     EA_JSR_ABS
00001342                           399              
00001342  BE3C 0001                400              CMP.B   #$01,D7
00001346  6700 0016                401              BEQ     EA_JSR_ABS
0000134A                           402  
0000134A                           403              * NOT EA WE KNOW LOGIC HERE?
0000134A  48E7 0120                404              MOVEM.L A2/D7,-(SP)
0000134E  4EB9 000031E8            405              JSR     INVALID_EA
00001354  4CDF 0480                406              MOVEM.L (SP)+,A2/D7
00001358                           407              
00001358  244C                     408              MOVEA.L A4,A2
0000135A  6000 FEDC                409              BRA     INCREMENT
0000135E                           410  
0000135E                           411              
0000135E                           412  EA_JSR_ABS
0000135E                           413              
0000135E  0807 0000                414              BTST.L  #$00,D7         *Check data register to see if long or word
00001362  6600 002A                415              BNE     EA_JSR_LONG     *long adressing
00001366  548A                     416              ADDA.L  #$2,A2          *else word adressing and grab extra word address
00001368                           417              
00001368  3212                     418              MOVE.W  (A2),D1         *MAKE SURE TO REMEMBER TO FIX FOR LEADING ZEROS
0000136A                           419              
0000136A  43F9 0000330B            420              LEA     SPACE,A1
00001370  103C 000E                421              MOVE.B  #14,D0
00001374  4E4F                     422              TRAP    #15
00001376                           423              
00001376  43F9 000033DE            424              LEA     HEX_SIGN,A1
0000137C  4E4F                     425              TRAP    #15
0000137E                           426              
0000137E  103C 000F                427              MOVE.B  #15,D0
00001382  143C 0010                428              MOVE.B  #16,D2
00001386  4E4F                     429              TRAP    #15
00001388                           430              
00001388                           431              
00001388  548A                     432              ADDA.L  #$2,A2      *increment 
0000138A                           433              
0000138A  6000 FEAC                434              BRA     INCREMENT
0000138E                           435              
0000138E                           436  EA_JSR_LONG
0000138E  548A                     437              ADDA.L  #$2,A2          *grab first extra word address
00001390                           438              
00001390  3212                     439              MOVE.W  (A2),D1         *MAKE SURE TO REMEMBER TO FIX FOR LEADING ZEROS
00001392                           440              
00001392  43F9 0000330B            441              LEA     SPACE,A1
00001398  103C 000E                442              MOVE.B  #14,D0
0000139C  4E4F                     443              TRAP    #15
0000139E                           444              
0000139E  43F9 000033DE            445              LEA     HEX_SIGN,A1
000013A4  4E4F                     446              TRAP    #15
000013A6                           447              
000013A6  103C 000F                448              MOVE.B  #15,D0
000013AA  143C 0010                449              MOVE.B  #16,D2
000013AE  4E4F                     450              TRAP    #15
000013B0                           451              
000013B0  548A                     452              ADDA.L  #$2,A2          *grab second extra word address
000013B2                           453              
000013B2  3212                     454              MOVE.W  (A2),D1         *MAKE SURE TO REMEMBER TO FIX FOR LEADING ZEROS
000013B4                           455              
000013B4  4E4F                     456              TRAP    #15
000013B6                           457              
000013B6  548A                     458              ADDA.L  #$2,A2      *increment 
000013B8  6000 FE7E                459              BRA     INCREMENT
000013BC                           460  
000013BC                           461  *-----------------------------------------------------------
000013BC                           462  * Test to see if we have a matching Memory Shift ROR op code. 
000013BC                           463  * If so print out the memory address and the op code.
000013BC                           464  *-----------------------------------------------------------            
000013BC                           465  MATCH_MEMROR
000013BC  220A                     466              MOVE.L  A2,D1
000013BE  143C 0010                467              MOVE.B  #16,D2
000013C2  103C 000F                468              MOVE.B  #15,D0
000013C6  4E4F                     469              TRAP    #15
000013C8                           470              
000013C8  43F9 00003353            471              LEA     MSG_ROR,A1
000013CE  103C 000E                472              MOVE.B  #14,D0
000013D2  4E4F                     473              TRAP    #15
000013D4  48E7 0120                474              MOVEM.L A2/D7,-(SP)
000013D8  4EB9 0000319C            475              JSR     MATCH_SIZE_MEMLAR
000013DE  4CDF 0480                476              MOVEM.L (SP)+,A2/D7
000013E2                           477  
000013E2  48E7 0120                478              MOVEM.L A2/D7,-(SP)
000013E6  4EB9 000026FA            479              JSR     EA_MEM_SHIFT_ROTATE
000013EC  4CDF 0480                480              MOVEM.L (SP)+,A2/D7
000013F0                           481              
000013F0  244C                     482              MOVEA.L  A4,A2
000013F2  6000 FE44                483              BRA     INCREMENT
000013F6                           484  
000013F6                           485  *-----------------------------------------------------------
000013F6                           486  * Test to see if we have a matching Memory Shift ROL op code. 
000013F6                           487  * If so print out the memory address and the op code.
000013F6                           488  *-----------------------------------------------------------            
000013F6                           489  MATCH_MEMROL
000013F6  220A                     490              MOVE.L  A2,D1
000013F8  143C 0010                491              MOVE.B  #16,D2
000013FC  103C 000F                492              MOVE.B  #15,D0
00001400  4E4F                     493              TRAP    #15
00001402                           494              
00001402  43F9 0000335A            495              LEA     MSG_ROL,A1
00001408  103C 000E                496              MOVE.B  #14,D0
0000140C  4E4F                     497              TRAP    #15
0000140E                           498              
0000140E  48E7 0120                499              MOVEM.L A2/D7,-(SP)
00001412  4EB9 0000319C            500              JSR     MATCH_SIZE_MEMLAR
00001418  4CDF 0480                501              MOVEM.L (SP)+,A2/D7
0000141C                           502  
0000141C  48E7 0120                503              MOVEM.L A2/D7,-(SP)
00001420  4EB9 000026FA            504              JSR     EA_MEM_SHIFT_ROTATE
00001426  4CDF 0480                505              MOVEM.L (SP)+,A2/D7
0000142A                           506              
0000142A  244C                     507              MOVEA.L  A4,A2
0000142C  6000 FE0A                508              BRA     INCREMENT
00001430                           509         
00001430                           510  
00001430                           511  *-----------------------------------------------------------
00001430                           512  * Test to see if we have a matching Memory Shift LSR op code. 
00001430                           513  * If so print out the memory address and the op code.
00001430                           514  *-----------------------------------------------------------
00001430                           515  MATCH_MEMLSHIFTR  
00001430  220A                     516              MOVE.L  A2,D1 
00001432  143C 0010                517              MOVE.B  #16,D2
00001436  103C 000F                518              MOVE.B  #15,D0
0000143A  4E4F                     519              TRAP    #15
0000143C                           520              
0000143C  43F9 0000331B            521              LEA     MSG_LSR,A1
00001442  103C 000E                522              MOVE.B  #14,D0
00001446  4E4F                     523              TRAP    #15
00001448                           524              
00001448  48E7 0120                525              MOVEM.L A2/D7,-(SP)
0000144C  4EB9 0000319C            526              JSR     MATCH_SIZE_MEMLAR
00001452  4CDF 0480                527              MOVEM.L (SP)+,A2/D7
00001456                           528              
00001456  48E7 0120                529              MOVEM.L A2/D7,-(SP)
0000145A  4EB9 000026FA            530              JSR     EA_MEM_SHIFT_ROTATE
00001460  4CDF 0480                531              MOVEM.L (SP)+,A2/D7
00001464                           532              
00001464  244C                     533              MOVEA.L  A4,A2
00001466  6000 FDD0                534              BRA     INCREMENT
0000146A                           535              
0000146A                           536  *-----------------------------------------------------------
0000146A                           537  * Test to see if we have a matching Memory Shift LSL op code. 
0000146A                           538  * If so print out the memory address and the op code.
0000146A                           539  *-----------------------------------------------------------            
0000146A                           540  MATCH_MEMLSHIFTL
0000146A  220A                     541              MOVE.L  A2,D1
0000146C  143C 0010                542              MOVE.B  #16,D2
00001470  103C 000F                543              MOVE.B  #15,D0
00001474  4E4F                     544              TRAP    #15
00001476                           545              
00001476  43F9 00003314            546              LEA     MSG_LSL,A1
0000147C  103C 000E                547              MOVE.B  #14,D0
00001480  4E4F                     548              TRAP    #15
00001482                           549              
00001482  48E7 0120                550              MOVEM.L A2/D7,-(SP)
00001486  4EB9 0000319C            551              JSR     MATCH_SIZE_MEMLAR
0000148C  4CDF 0480                552              MOVEM.L (SP)+,A2/D7
00001490                           553  
00001490  48E7 0120                554              MOVEM.L A2/D7,-(SP)
00001494  4EB9 000026FA            555              JSR     EA_MEM_SHIFT_ROTATE
0000149A  4CDF 0480                556              MOVEM.L (SP)+,A2/D7
0000149E                           557              
0000149E  244C                     558              MOVEA.L  A4,A2
000014A0  6000 FD96                559              BRA     INCREMENT
000014A4                           560              
000014A4                           561  *-----------------------------------------------------------
000014A4                           562  * Test to see if we have a matching Memory Shift ASR op code. 
000014A4                           563  * If so print out the memory address and the op code.
000014A4                           564  *-----------------------------------------------------------            
000014A4                           565  MATCH_MEMASHIFTR
000014A4  220A                     566              MOVE.L  A2,D1
000014A6  143C 0010                567              MOVE.B  #16,D2
000014AA  103C 000F                568              MOVE.B  #15,D0
000014AE  4E4F                     569              TRAP    #15
000014B0                           570              
000014B0  43F9 00003329            571              LEA     MSG_ASR,A1
000014B6  103C 000E                572              MOVE.B  #14,D0
000014BA  4E4F                     573              TRAP    #15
000014BC                           574              
000014BC  48E7 0120                575              MOVEM.L A2/D7,-(SP)
000014C0  4EB9 0000319C            576              JSR     MATCH_SIZE_MEMLAR
000014C6  4CDF 0480                577              MOVEM.L (SP)+,A2/D7
000014CA                           578              
000014CA  48E7 0120                579              MOVEM.L A2/D7,-(SP)
000014CE  4EB9 000026FA            580              JSR     EA_MEM_SHIFT_ROTATE
000014D4  4CDF 0480                581              MOVEM.L (SP)+,A2/D7
000014D8                           582  
000014D8                           583              
000014D8  244C                     584              MOVEA.L  A4,A2
000014DA  6000 FD5C                585              BRA     INCREMENT
000014DE                           586  
000014DE                           587  *-----------------------------------------------------------
000014DE                           588  * Test to see if we have a matching Memory Shift ASL op code. 
000014DE                           589  * If so print out the memory address and the op code.
000014DE                           590  *-----------------------------------------------------------
000014DE                           591  MATCH_MEMASHIFTL
000014DE  220A                     592              MOVE.L  A2,D1
000014E0  143C 0010                593              MOVE.B  #16,D2
000014E4  103C 000F                594              MOVE.B  #15,D0
000014E8  4E4F                     595              TRAP    #15
000014EA                           596              
000014EA  43F9 00003322            597              LEA     MSG_ASL,A1
000014F0  103C 000E                598              MOVE.B  #14,D0
000014F4  4E4F                     599              TRAP    #15
000014F6                           600              
000014F6  48E7 0120                601              MOVEM.L A2/D7,-(SP)
000014FA  4EB9 0000319C            602              JSR     MATCH_SIZE_MEMLAR
00001500  4CDF 0480                603              MOVEM.L (SP)+,A2/D7
00001504                           604  
00001504  48E7 0120                605              MOVEM.L A2/D7,-(SP)
00001508  4EB9 000026FA            606              JSR     EA_MEM_SHIFT_ROTATE
0000150E  4CDF 0480                607              MOVEM.L (SP)+,A2/D7
00001512                           608  
00001512                           609              
00001512  244C                     610              MOVEA.L  A4,A2
00001514  6000 FD22                611              BRA     INCREMENT
00001518                           612  
00001518                           613  *-----------------------------------------------------------
00001518                           614  * Test to see if we have a matching NOT op code. If so
00001518                           615  * print out the memory address and the op code.
00001518                           616  *-----------------------------------------------------------
00001518                           617  MATCH_NOT
00001518  220A                     618              MOVE.L  A2,D1
0000151A  143C 0010                619              MOVE.B  #16,D2
0000151E  103C 000F                620              MOVE.B  #15,D0
00001522  4E4F                     621              TRAP    #15
00001524                           622              
00001524  43F9 00003330            623              LEA     MSG_NOT,A1
0000152A  103C 000E                624              MOVE.B  #14,D0
0000152E  4E4F                     625              TRAP    #15
00001530                           626              
00001530  3E12                     627              MOVE.W  (A2),D7
00001532                           628               *TEST GET SOURCE SUB
00001532  3E12                     629              MOVE.W  (A2),D7
00001534  48E7 0120                630              MOVEM.L A2/D7,-(SP)
00001538  4EB9 0000157A            631              JSR     SIZE_NOT
0000153E  4CDF 0480                632              MOVEM.L (SP)+,A2/D7
00001542                           633              
00001542  43F9 0000330B            634              LEA     SPACE,A1        * Byte displacement
00001548  103C 000E                635              MOVE.B  #14,D0
0000154C  4E4F                     636              TRAP    #15
0000154E                           637              
0000154E  48E7 0120                638              MOVEM.L A2/D7,-(SP)
00001552  4EB9 00001594            639              JSR     T_NOT_EA
00001558  4CDF 0480                640              MOVEM.L (SP)+,A2/D7
0000155C                           641              
0000155C  BC3C 0001                642              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print 
00001560                           643                                          *INVALID_EA
00001560  6700 1C8E                644              BEQ     INVAL_EA_NO_RTS
00001564                           645              
00001564                           646              
00001564  48E7 0120                647              MOVEM.L A2/D7,-(SP)
00001568  4EB9 000015EE            648              JSR     NOT_EA
0000156E  4CDF 0480                649              MOVEM.L (SP)+,A2/D7
00001572                           650              
00001572  244C                     651              MOVEA.L A4,A2             *move A3 to A2 since absolute address may have been used
00001574  548A                     652              ADDA.L  #$2,A2          * Increase counter by long
00001576                           653              
00001576                           654  
00001576  6000 FCC0                655              BRA     INCREMENT       * Branch back up to main loop
0000157A                           656  
0000157A                           657  
0000157A                           658  SIZE_NOT
0000157A  EC0F                     659              LSR.B   #6,D7
0000157C  BE3C 0000                660              CMP.B   #$0,D7
00001580  6700 1C36                661              BEQ     BYTE
00001584  BE3C 0001                662              CMP.B   #$1,D7
00001588  6700 1C3E                663              BEQ     WORD
0000158C  BE3C 0002                664              CMP.B   #$2,D7
00001590  6700 1C46                665              BEQ     LONG
00001594                           666  
00001594                           667              
00001594                           668  T_NOT_EA
00001594  3E12                     669              MOVE.W  (A2),D7
00001596  760A                     670              MOVE.L  #10,D3
00001598  E76F                     671              LSL.W   D3,D7   *shift D7 to right 13 to get the register
0000159A  760D                     672              MOVE.L  #13,D3
0000159C  E66F                     673              LSR.W   D3,D7   *shift D7 to right 13 to get the register
0000159E                           674  
0000159E  BE3C 0000                675              CMP.B   #$0,D7          *mode is Dn
000015A2  6700 1868                676              BEQ     GOOD            *ea valid
000015A6  BE3C 0001                677              CMP.B   #$1,D7          
000015AA  6700 1C3C                678              BEQ     INVALID_EA
000015AE  BE3C 0002                679              CMP.B   #$2,D7             *mode is (An)
000015B2  6700 1858                680              BEQ     GOOD       *(An) 
000015B6  BE3C 0003                681              CMP.B   #$3,D7
000015BA  6700 1850                682              BEQ     GOOD      *(An)+
000015BE  BE3C 0004                683              CMP.B   #$4,D7
000015C2  6700 1848                684              BEQ     GOOD      *-(An)
000015C6  BE3C 0007                685              CMP.B   #$7,D7
000015CA  6700 0006                686              BEQ     T_NOT_IMM_REG     *(xxx).W or (xxx).L or #<data>
000015CE  6000 1C18                687              BRA     INVALID_EA
000015D2                           688              
000015D2                           689  T_NOT_IMM_REG 
000015D2  3E12                     690              MOVE.W  (A2),D7
000015D4  760D                     691              MOVE.L  #13,D3
000015D6  E76F                     692              LSL.W   D3,D7
000015D8  E66F                     693              LSR.W   D3,D7
000015DA  BE3C 0000                694              CMP.B   #$0,D7
000015DE  6700 182C                695              BEQ     GOOD  *word absolute address
000015E2  BE3C 0001                696              CMP.B   #$1,D7
000015E6  6700 1824                697              BEQ     GOOD  *long absolute address
000015EA  6000 1BFC                698              BRA     INVALID_EA  
000015EE                           699  
000015EE                           700  NOT_EA
000015EE  3E12                     701              MOVE.W  (A2),D7
000015F0  760A                     702              MOVE.L  #10,D3
000015F2  E76F                     703              LSL.W   D3,D7   *shift D7 to right 13 to get the register
000015F4  760D                     704              MOVE.L  #13,D3
000015F6  E66F                     705              LSR.W   D3,D7   *shift D7 to right 13 to get the register
000015F8                           706  
000015F8  BE3C 0000                707              CMP.B   #$0,D7
000015FC  6700 1B54                708              BEQ     DATA_R_S 
00001600  BE3C 0001                709              CMP.B   #$1,D7
00001604  6700 1BE2                710              BEQ     INVALID_EA      *An
00001608  BE3C 0002                711              CMP.B   #$2,D7
0000160C  6700 19A6                712              BEQ     ADDY_R_SP       *(An)
00001610  BE3C 0003                713              CMP.B   #$3,D7
00001614  6700 1A18                714              BEQ     ADDY_R_SPI      *(An)+
00001618  BE3C 0004                715              CMP.B   #$4,D7
0000161C  6700 1AA2                716              BEQ     ADDY_R_SPD      *-(An)
00001620  BE3C 0007                717              CMP.B   #$7,D7
00001624  6700 0006                718              BEQ     NOT_IMM_REG
00001628  6000 1BBE                719              BRA     INVALID_EA  
0000162C                           720              
0000162C                           721  NOT_IMM_REG 
0000162C  3E12                     722              MOVE.W  (A2),D7
0000162E  760D                     723              MOVE.L  #13,D3
00001630  E76F                     724              LSL.W   D3,D7
00001632  E66F                     725              LSR.W   D3,D7
00001634  BE3C 0000                726              CMP.B   #$0,D7
00001638  6700 1862                727              BEQ     W_ADDY  *word absolute address
0000163C  BE3C 0001                728              CMP.B   #$1,D7
00001640  6700 187A                729              BEQ     L_ADDY  *long absolute address
00001644  6000 1BA2                730              BRA     INVALID_EA    
00001648                           731  
00001648                           732  
00001648                           733            
00001648                           734              
00001648                           735  *-----------------------------------------------------------
00001648                           736  * Test to see if we have a matching BRA op code. If so
00001648                           737  * print out the memory address and the op code.
00001648                           738  *-----------------------------------------------------------
00001648                           739  MATCH_BRA
00001648  220A                     740              MOVE.L  A2,D1
0000164A  143C 0010                741              MOVE.B  #16,D2
0000164E  103C 000F                742              MOVE.B  #15,D0
00001652  4E4F                     743              TRAP    #15
00001654                           744              
00001654  43F9 00003337            745              LEA     MSG_BRA,A1
0000165A  103C 000E                746              MOVE.B  #14,D0
0000165E  4E4F                     747              TRAP    #15
00001660                           748              
00001660  3E12                     749              MOVE.W  (A2),D7
00001662  BE3C 0000                750              CMP.B   #$00,D7         * Compare to see if we have a word displacement or byte
00001666  6700 002A                751              BEQ     EA_BRA_WORD
0000166A                           752              
0000166A  43F9 0000330B            753              LEA     SPACE,A1        * Byte displacement
00001670  103C 000E                754              MOVE.B  #14,D0
00001674  4E4F                     755              TRAP    #15
00001676                           756              
00001676  43F9 000033DE            757              LEA     HEX_SIGN,A1     * HEX SIGN HERE?
0000167C  4E4F                     758              TRAP    #15
0000167E                           759              
0000167E  4241                     760              CLR     D1
00001680  1207                     761              MOVE.B  D7,D1
00001682  143C 0010                762              MOVE.B  #16,D2
00001686  103C 000F                763              MOVE.B  #15,D0
0000168A  4E4F                     764              TRAP    #15
0000168C                           765              
0000168C  548A                     766              ADDA.L  #$2,A2
0000168E                           767              
0000168E  6000 FBA8                768              BRA     INCREMENT
00001692                           769              
00001692                           770  EA_BRA_WORD
00001692  548A                     771              ADDA.L  #$2,A2            
00001694  43F9 0000330B            772              LEA     SPACE,A1        * Byte displacement
0000169A  103C 000E                773              MOVE.B  #14,D0
0000169E  4E4F                     774              TRAP    #15
000016A0                           775              
000016A0  43F9 000033DE            776              LEA     HEX_SIGN,A1     * HEX SIGN HERE?
000016A6  4E4F                     777              TRAP    #15
000016A8                           778              
000016A8  4241                     779              CLR     D1
000016AA  3212                     780              MOVE.W  (A2),D1
000016AC  143C 0010                781              MOVE.B  #16,D2
000016B0  103C 000F                782              MOVE.B  #15,D0
000016B4  4E4F                     783              TRAP    #15
000016B6                           784              
000016B6  548A                     785              ADDA.L  #$2,A2
000016B8                           786  
000016B8  6000 FB7E                787              BRA     INCREMENT
000016BC                           788             
000016BC                           789  *-----------------------------------------------------------
000016BC                           790  * Test to see if we have a matching logical, arthemetic, or rotate
000016BC                           791  * shift. (Register shift)
000016BC                           792  *-----------------------------------------------------------
000016BC                           793  MATCH_SHIFT
000016BC  3E12                     794              MOVE.W  (A2),D7         *Get full instruction again to figure out the type of shift or rotate
000016BE  E64F                     795              LSR.W   #3,D7          
000016C0                           796              
000016C0  CE7C 0003                797              AND.W   #$0003,D7
000016C4                           798              
000016C4  BE3C 0003                799              CMP.B   #$03,D7
000016C8  6700 0012                800              BEQ     ROTATE
000016CC                           801              
000016CC  BE3C 0001                802              CMP.B   #$01,D7
000016D0  6700 0090                803              BEQ     LSHIFT
000016D4                           804              
000016D4  BE3C 0000                805              CMP.B   #$00,D7
000016D8  6700 010E                806              BEQ     ASHIFT     
000016DC                           807         
000016DC                           808  *-----------------------------------------------------------
000016DC                           809  * We have a rotate instruction.Check to see if left or right.
000016DC                           810  *-----------------------------------------------------------
000016DC                           811  ROTATE
000016DC  3E12                     812              MOVE.W  (A2),D7
000016DE  0807 0008                813              BTST.L  #$8,D7          * Check if left or right direction (8th bit gets tested)
000016E2  6600 0040                814              BNE     RL
000016E6                           815              
000016E6  220A                     816              MOVE.L  A2,D1           * Must be a right logical shift so dont branch
000016E8  143C 0010                817              MOVE.B  #16,D2
000016EC  103C 000F                818              MOVE.B  #15,D0
000016F0  4E4F                     819              TRAP    #15
000016F2                           820              
000016F2  43F9 00003353            821              LEA     MSG_ROR,A1
000016F8  103C 000E                822              MOVE.B  #14,D0
000016FC  4E4F                     823              TRAP    #15
000016FE                           824              
000016FE                           825              * TESTING FOR SIZE
000016FE  CE7C 00C0                826              AND     #$00C0,D7
00001702                           827              
00001702  48E7 0120                828              MOVEM.L A2/D7,-(SP)
00001706  4EB9 000031A0            829              JSR     MATCH_SIZE_LAR
0000170C  4CDF 0480                830              MOVEM.L (SP)+,A2/D7
00001710                           831  
00001710  48E7 0120                832              MOVEM.L A2/D7,-(SP)
00001714  4EB9 00002882            833              JSR     EA_SHIFT_ROTATE  
0000171A  4CDF 0480                834              MOVEM.L (SP)+,A2/D7
0000171E                           835  
0000171E                           836              
0000171E  548A                     837              ADDA.L  #$2,A2
00001720                           838              
00001720  6000 FB16                839              BRA     INCREMENT
00001724                           840  
00001724                           841  * Rotate Left
00001724                           842  RL
00001724  220A                     843              MOVE.L  A2,D1
00001726  143C 0010                844              MOVE.B  #16,D2
0000172A  103C 000F                845              MOVE.B  #15,D0
0000172E  4E4F                     846              TRAP    #15
00001730                           847              
00001730  43F9 0000335A            848              LEA     MSG_ROL,A1
00001736  103C 000E                849              MOVE.B  #14,D0
0000173A  4E4F                     850              TRAP    #15
0000173C                           851              
0000173C                           852              
0000173C                           853              * TESTING FOR SIZE
0000173C  CE7C 00C0                854              AND     #$00C0,D7
00001740                           855              
00001740  48E7 0120                856              MOVEM.L A2/D7,-(SP)
00001744  4EB9 000031A0            857              JSR     MATCH_SIZE_LAR
0000174A  4CDF 0480                858              MOVEM.L (SP)+,A2/D7
0000174E                           859              
0000174E  48E7 0120                860              MOVEM.L A2/D7,-(SP)
00001752  4EB9 00002882            861              JSR     EA_SHIFT_ROTATE  
00001758  4CDF 0480                862              MOVEM.L (SP)+,A2/D7
0000175C                           863  
0000175C                           864              
0000175C  548A                     865              ADDA.L  #$2,A2
0000175E                           866              
0000175E  6000 FAD8                867              BRA     INCREMENT
00001762                           868  *-----------------------------------------------------------
00001762                           869  * We have a logical register shift. Check to see if its 
00001762                           870  * left or right.
00001762                           871  *-----------------------------------------------------------
00001762                           872  LSHIFT
00001762  3E12                     873              MOVE.W  (A2),D7
00001764  0807 0008                874              BTST.L  #$8,D7          * Check if left or right direction (8th bit gets tested)
00001768  6600 0040                875              BNE     LL
0000176C                           876              
0000176C  220A                     877              MOVE.L  A2,D1           * Must be a right logical shift so dont branch
0000176E  143C 0010                878              MOVE.B  #16,D2
00001772  103C 000F                879              MOVE.B  #15,D0
00001776  4E4F                     880              TRAP    #15
00001778                           881              
00001778  43F9 0000331B            882              LEA     MSG_LSR,A1
0000177E  103C 000E                883              MOVE.B  #14,D0
00001782  4E4F                     884              TRAP    #15
00001784                           885              
00001784                           886              * TESTING FOR SIZE
00001784  CE7C 00C0                887              AND     #$00C0,D7
00001788                           888              
00001788  48E7 0120                889              MOVEM.L A2/D7,-(SP)
0000178C  4EB9 000031A0            890              JSR     MATCH_SIZE_LAR  
00001792  4CDF 0480                891              MOVEM.L (SP)+,A2/D7
00001796                           892              
00001796  48E7 0120                893              MOVEM.L A2/D7,-(SP)
0000179A  4EB9 00002882            894              JSR     EA_SHIFT_ROTATE  
000017A0  4CDF 0480                895              MOVEM.L (SP)+,A2/D7
000017A4                           896       
000017A4  548A                     897              ADDA.L  #$2,A2
000017A6                           898              
000017A6  6000 FA90                899              BRA     INCREMENT
000017AA                           900  
000017AA                           901  * Logical Left Shift            
000017AA                           902  LL
000017AA  220A                     903              MOVE.L  A2,D1
000017AC  143C 0010                904              MOVE.B  #16,D2
000017B0  103C 000F                905              MOVE.B  #15,D0
000017B4  4E4F                     906              TRAP    #15
000017B6                           907              
000017B6  43F9 00003314            908              LEA     MSG_LSL,A1
000017BC  103C 000E                909              MOVE.B  #14,D0
000017C0  4E4F                     910              TRAP    #15
000017C2                           911              
000017C2                           912              * TESTING FOR SIZE
000017C2  CE7C 00C0                913              AND     #$00C0,D7
000017C6                           914  
000017C6  48E7 0120                915              MOVEM.L A2/D7,-(SP)
000017CA  4EB9 000031A0            916              JSR     MATCH_SIZE_LAR
000017D0  4CDF 0480                917              MOVEM.L (SP)+,A2/D7
000017D4                           918              
000017D4  48E7 0120                919              MOVEM.L A2/D7,-(SP)
000017D8  4EB9 00002882            920              JSR     EA_SHIFT_ROTATE  
000017DE  4CDF 0480                921              MOVEM.L (SP)+,A2/D7
000017E2                           922  
000017E2                           923              
000017E2  548A                     924              ADDA.L  #$2,A2
000017E4                           925              
000017E4  6000 FA52                926              BRA     INCREMENT
000017E8                           927              
000017E8                           928  *-----------------------------------------------------------
000017E8                           929  * We have a arithmetic register shift. Check to see if its 
000017E8                           930  * left or right.
000017E8                           931  *-----------------------------------------------------------    
000017E8                           932  ASHIFT
000017E8  3E12                     933              MOVE.W  (A2),D7
000017EA  0807 0008                934              BTST.L  #$8,D7          * Check if left or right direction (8th bit gets tested)
000017EE  6600 0040                935              BNE     AL
000017F2                           936  
000017F2  220A                     937              MOVE.L  A2,D1           * Must be a right arithmetic shift so dont branch
000017F4  143C 0010                938              MOVE.B  #16,D2
000017F8  103C 000F                939              MOVE.B  #15,D0
000017FC  4E4F                     940              TRAP    #15
000017FE                           941              
000017FE  43F9 00003329            942              LEA     MSG_ASR,A1
00001804  103C 000E                943              MOVE.B  #14,D0
00001808  4E4F                     944              TRAP    #15
0000180A                           945              
0000180A                           946              * TESTING FOR SIZE
0000180A  CE7C 00C0                947              AND     #$00C0,D7
0000180E                           948              
0000180E  48E7 0120                949              MOVEM.L A2/D7,-(SP)
00001812  4EB9 000031A0            950              JSR     MATCH_SIZE_LAR
00001818  4CDF 0480                951              MOVEM.L (SP)+,A2/D7
0000181C                           952              
0000181C  48E7 0120                953              MOVEM.L A2/D7,-(SP)
00001820  4EB9 00002882            954              JSR     EA_SHIFT_ROTATE  
00001826  4CDF 0480                955              MOVEM.L (SP)+,A2/D7
0000182A                           956  
0000182A                           957              
0000182A  548A                     958              ADDA.L  #$2,A2
0000182C                           959              
0000182C  6000 FA0A                960              BRA     INCREMENT
00001830                           961              
00001830                           962  * Arithmetic Left Shift            
00001830                           963  AL
00001830  220A                     964              MOVE.L  A2,D1
00001832  143C 0010                965              MOVE.B  #16,D2
00001836  103C 000F                966              MOVE.B  #15,D0
0000183A  4E4F                     967              TRAP    #15
0000183C                           968              
0000183C  43F9 00003322            969              LEA     MSG_ASL,A1
00001842  103C 000E                970              MOVE.B  #14,D0
00001846  4E4F                     971              TRAP    #15
00001848                           972              
00001848                           973              * TESTING FOR SIZE
00001848  CE7C 00C0                974              AND     #$00C0,D7
0000184C                           975              
0000184C  48E7 0120                976              MOVEM.L A2/D7,-(SP)
00001850  4EB9 000031A0            977              JSR     MATCH_SIZE_LAR
00001856  4CDF 0480                978              MOVEM.L (SP)+,A2/D7
0000185A                           979              
0000185A  48E7 0120                980              MOVEM.L A2/D7,-(SP)
0000185E  4EB9 00002882            981              JSR     EA_SHIFT_ROTATE  
00001864  4CDF 0480                982              MOVEM.L (SP)+,A2/D7
00001868                           983  
00001868                           984              
00001868  548A                     985              ADDA.L  #$2,A2
0000186A                           986              
0000186A  6000 F9CC                987              BRA     INCREMENT
0000186E                           988  *-----------------------------------------------------------
0000186E                           989  * Test to see if we have a matching MOVEQ op code. If so
0000186E                           990  * print out the memory address and the op code.
0000186E                           991  *----------------------------------------------------------- 
0000186E                           992  MATCH_MOVEQ
0000186E  3E12                     993              MOVE.W  (A2),D7
00001870  760F                     994              MOVE.L #15,D3
00001872  EF4F                     995              LSL.W   #7,D7
00001874  E66F                     996              LSR.W   D3,D7
00001876                           997              
00001876  BE3C 0000                998              CMP.B   #$00,D7
0000187A  6600 F982                999              BNE     NOOP
0000187E                          1000              *print moveq
0000187E  220A                    1001              MOVE.L  A2,D1
00001880  143C 0010               1002              MOVE.B  #16,D2
00001884  103C 000F               1003              MOVE.B  #15,D0
00001888  4E4F                    1004              TRAP    #15
0000188A                          1005              
0000188A  43F9 00003371           1006              LEA     MSG_MOVEQ,A1
00001890  103C 000E               1007              MOVE.B  #14,D0
00001894  4E4F                    1008              TRAP    #15
00001896                          1009              
00001896  43F9 0000330B           1010              LEA     SPACE,A1        
0000189C  103C 000E               1011              MOVE.B  #14,D0
000018A0  4E4F                    1012              TRAP    #15
000018A2                          1013              
000018A2                          1014              *print data of moveq
000018A2  43F9 000033E0           1015              LEA     HASH_SIGN,A1
000018A8  103C 000E               1016              MOVE.B  #14,D0
000018AC  4E4F                    1017              TRAP    #15
000018AE                          1018              
000018AE  43F9 000033DE           1019              LEA     HEX_SIGN,A1
000018B4  4E4F                    1020              TRAP    #15
000018B6                          1021              
000018B6  3E12                    1022              MOVE.W  (A2),D7
000018B8  E14F                    1023              LSL.W   #8,D7
000018BA  E04F                    1024              LSR.W   #8,D7
000018BC  2207                    1025              MOVE.L  D7,D1
000018BE                          1026              
000018BE  7410                    1027              MOVE.L  #16,D2
000018C0  103C 000F               1028              MOVE.B  #15,D0
000018C4  4E4F                    1029              TRAP    #15
000018C6                          1030  
000018C6  43F9 0000338E           1031              LEA     MSG_COMMA,A1
000018CC  103C 000E               1032              MOVE.B  #14,D0
000018D0  4E4F                    1033              TRAP    #15
000018D2                          1034              
000018D2                          1035              *print Dn
000018D2  E94F                    1036              LSL.W   #4,D7
000018D4  760D                    1037              MOVE.L  #13,D3
000018D6  E66F                    1038              LSR.W   D3,D7
000018D8  2207                    1039              MOVE.L  D7,D1
000018DA                          1040      
000018DA  3E12                    1041              MOVE.W  (A2),D7
000018DC  48E7 0120               1042              MOVEM.L A2/D7,-(SP)
000018E0  4EB9 00003176           1043              JSR     DATA_R_D    *print Dn
000018E6  4CDF 0480               1044              MOVEM.L (SP)+,A2/D7
000018EA                          1045              
000018EA  244C                    1046              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000018EC  548A                    1047              ADDA.L  #$2,A2          * Increase counter by long
000018EE                          1048              
000018EE                          1049          
000018EE  6000 F948               1050              BRA     INCREMENT       * Branch back up to main loop
000018F2                          1051  
000018F2                          1052  
000018F2                          1053  *-----------------------------------------------------------
000018F2                          1054  * Test to see if we have a matching ADD op code. If so
000018F2                          1055  * print out the memory address and the op code.
000018F2                          1056  *-----------------------------------------------------------   
000018F2                          1057  MATCH_ADD
000018F2  3E12                    1058              MOVE.W  (A2),D7
000018F4  EF4F                    1059              LSL.W   #7,D7       *shift value in D7 to the left by 7 bits
000018F6  760D                    1060              MOVE.L  #13,D3
000018F8  E66F                    1061              LSR.W   D3,D7 
000018FA  BE3C 0003               1062              CMP.B   #$3,D7      *check if opcode is $3 if so it is ADDA
000018FE                          1063  
000018FE  6700 00DC               1064              BEQ     MATCH_ADDA
00001902  BE3C 0007               1065              CMP.B  #$7,D7       *check if opcode is $7 if so it is ADDA
00001906  6700 00D4               1066              BEQ     MATCH_ADDA
0000190A                          1067              
0000190A  220A                    1068              MOVE.L  A2,D1
0000190C  143C 0010               1069              MOVE.B  #16,D2
00001910  103C 000F               1070              MOVE.B  #15,D0
00001914  4E4F                    1071              TRAP    #15
00001916                          1072              
00001916  43F9 00003399           1073              LEA     MSG_ADD,A1  *print out ADDA
0000191C  103C 000E               1074              MOVE.B  #14,D0
00001920  4E4F                    1075              TRAP    #15
00001922                          1076      
00001922                          1077             * PRINT SIZE
00001922  3E12                    1078              MOVE.W  (A2),D7
00001924  48E7 0120               1079              MOVEM.L A2/D7,-(SP)
00001928  4EB9 000019A2           1080              JSR     ADD_SIZE_SUB    
0000192E  4CDF 0480               1081              MOVEM.L (SP)+,A2/D7
00001932                          1082              
00001932  43F9 0000330B           1083              LEA     SPACE,A1        
00001938  103C 000E               1084              MOVE.B  #14,D0
0000193C  4E4F                    1085              TRAP    #15
0000193E                          1086              
0000193E                          1087               *TEST GET SOURCE SUB
0000193E  3E12                    1088              MOVE.W  (A2),D7
00001940  48E7 0120               1089              MOVEM.L A2/D7,-(SP)
00001944  4EB9 00001E3A           1090              JSR     T_SUBTR_PRINT_SRC_EA
0000194A  4CDF 0480               1091              MOVEM.L (SP)+,A2/D7
0000194E                          1092              
0000194E  BC3C 0001               1093              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print 
00001952                          1094                                          *INVALID_EA
00001952  6700 189C               1095              BEQ     INVAL_EA_NO_RTS
00001956                          1096              
00001956                          1097              
00001956                          1098              * TEST PRINT DEST MODE AND REGISTER
00001956  3E12                    1099              MOVE.W  (A2),D7
00001958  48E7 0120               1100              MOVEM.L A2/D7,-(SP)
0000195C  4EB9 00001E78           1101              JSR     T_SUBTR_PRINT_DEST_EA
00001962  4CDF 0480               1102              MOVEM.L (SP)+,A2/D7
00001966                          1103              
00001966  BC3C 0001               1104              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print 
0000196A  6700 1884               1105              BEQ     INVAL_EA_NO_RTS                            *INVALID_EA
0000196E                          1106              
0000196E                          1107  
0000196E                          1108              
0000196E                          1109  
0000196E                          1110              *GET SOURCE SUB
0000196E  3E12                    1111              MOVE.W  (A2),D7
00001970  48E7 0120               1112              MOVEM.L A2/D7,-(SP)
00001974  4EB9 00002026           1113              JSR     SUBTR_PRINT_SRC_EA  *print out source ea
0000197A  4CDF 0480               1114              MOVEM.L (SP)+,A2/D7
0000197E                          1115              
0000197E                          1116               * PRINT COMMA
0000197E  43F9 0000338E           1117              LEA     MSG_COMMA,A1
00001984  103C 000E               1118              MOVE.B  #14,D0
00001988  4E4F                    1119              TRAP    #15
0000198A                          1120              
0000198A                          1121              * PRINT DEST MODE AND REGISTER
0000198A  3E12                    1122              MOVE.W  (A2),D7
0000198C  48E7 0120               1123              MOVEM.L A2/D7,-(SP)
00001990  4EB9 0000205E           1124              JSR     SUBTR_PRINT_DEST_EA *print out dest ea
00001996  4CDF 0480               1125              MOVEM.L (SP)+,A2/D7
0000199A                          1126  
0000199A                          1127  
0000199A                          1128              
0000199A  244C                    1129              MOVEA.L A4,A2             *move A3 to A2 since absolute address may have been used
0000199C  548A                    1130              ADDA.L  #$2,A2          * Increase counter by long
0000199E                          1131              
0000199E  6000 F898               1132              BRA     INCREMENT       * Branch back up to main loop
000019A2                          1133  
000019A2                          1134  ADD_SIZE_SUB                           * ADD SIZE SUBROUTINE START
000019A2                          1135              * SHIFT TO SIZE FIELD
000019A2                          1136              
000019A2  EF4F                    1137              LSL.W   #7,D7
000019A4  760D                    1138              MOVE.L  #13,D3
000019A6  E66F                    1139              LSR.W   D3,D7
000019A8                          1140              * RUN COMPARISONS
000019A8  BE3C 0000               1141              CMP.B   #$0,D7
000019AC  6700 180A               1142              BEQ     BYTE
000019B0  BE3C 0001               1143              CMP.B   #$1,D7
000019B4  6700 1812               1144              BEQ     WORD
000019B8  BE3C 0002               1145              CMP.B   #$2,D7
000019BC  6700 181A               1146              BEQ     LONG
000019C0  BE3C 0004               1147              CMP.B   #$4,D7
000019C4  6700 17F2               1148              BEQ     BYTE
000019C8  BE3C 0005               1149              CMP.B   #$5,D7
000019CC  6700 17FA               1150              BEQ     WORD
000019D0  BE3C 0006               1151              CMP.B   #$6,D7
000019D4  6700 1802               1152              BEQ     LONG
000019D8  6000 1828               1153              BRA     EXIT
000019DC                          1154  
000019DC                          1155  
000019DC                          1156  
000019DC                          1157  
000019DC                          1158  MATCH_ADDA
000019DC  220A                    1159              MOVE.L  A2,D1
000019DE  143C 0010               1160              MOVE.B  #16,D2
000019E2  103C 000F               1161              MOVE.B  #15,D0
000019E6  4E4F                    1162              TRAP    #15
000019E8                          1163              
000019E8  43F9 000033A0           1164              LEA     MSG_ADDA,A1     *print ADDA
000019EE  103C 000E               1165              MOVE.B  #14,D0
000019F2  4E4F                    1166              TRAP    #15
000019F4                          1167              
000019F4                          1168              * PRINT SIZE
000019F4  3E12                    1169              MOVE.W  (A2),D7
000019F6  48E7 0120               1170              MOVEM.L A2/D7,-(SP)
000019FA  4EB9 00001B4E           1171              JSR     ADDA_SIZE_SUB
00001A00  4CDF 0480               1172              MOVEM.L (SP)+,A2/D7
00001A04                          1173              
00001A04  43F9 0000330B           1174              LEA     SPACE,A1        
00001A0A  103C 000E               1175              MOVE.B  #14,D0
00001A0E  4E4F                    1176              TRAP    #15
00001A10                          1177              
00001A10                          1178              *TEST EA
00001A10  3E12                    1179              MOVE.W  (A2),D7
00001A12  48E7 0120               1180              MOVEM.L A2/D7,-(SP)
00001A16  4EB9 00001AEC           1181              JSR     T_ADDA_PRINT_SRC_EA    *test ea 
00001A1C  4CDF 0480               1182              MOVEM.L (SP)+,A2/D7
00001A20                          1183              
00001A20                          1184  
00001A20  BC3C 0001               1185              CMP.B   #$1,D6
00001A24  6700 17CA               1186              BEQ     INVAL_EA_NO_RTS
00001A28                          1187              
00001A28  3E12                    1188              MOVE.W  (A2),D7
00001A2A  48E7 0120               1189              MOVEM.L A2/D7,-(SP)
00001A2E  4EB9 00001A6C           1190              JSR     ADDA_P_SRC_EA    *print ea 
00001A34  4CDF 0480               1191              MOVEM.L (SP)+,A2/D7
00001A38                          1192              
00001A38                          1193              * PRINT COMMA
00001A38  43F9 0000338E           1194              LEA     MSG_COMMA,A1
00001A3E  103C 000E               1195              MOVE.B  #14,D0
00001A42  4E4F                    1196              TRAP    #15
00001A44                          1197                  
00001A44  4287                    1198              CLR.L   D7
00001A46  3E12                    1199              MOVE.W  (A2),D7
00001A48                          1200              
00001A48                          1201              * PRINT ADDRESS REGISTER
00001A48  760D                    1202              MOVE.L  #13,D3
00001A4A  E94F                    1203              LSL.W   #4,D7
00001A4C  E66F                    1204              LSR.W   D3,D7   *get register bits 
00001A4E                          1205              
00001A4E  43F9 000033D8           1206              LEA     MSG_A,A1    *print An
00001A54  103C 000E               1207              MOVE.B  #14,D0
00001A58  4E4F                    1208              TRAP    #15
00001A5A                          1209   
00001A5A  7410                    1210              MOVE.L  #16,D2
00001A5C  2207                    1211              MOVE.L  D7,D1       *print register number of An
00001A5E  103C 000F               1212              MOVE.B  #15,D0
00001A62  4E4F                    1213              TRAP    #15
00001A64                          1214  
00001A64  244C                    1215              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
00001A66  548A                    1216              ADDA.L  #$2,A2          * Increase counter by long
00001A68                          1217  
00001A68  6000 F7CE               1218              BRA     INCREMENT       * Branch back up to main loop
00001A6C                          1219  ADDA_P_SRC_EA
00001A6C  3E12                    1220              MOVE.W  (A2),D7
00001A6E  760A                    1221              MOVE.L  #10,D3
00001A70  E76F                    1222              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001A72  760D                    1223              MOVE.L  #13,D3
00001A74  E66F                    1224              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001A76                          1225  
00001A76  BE3C 0000               1226              CMP.B   #$0,D7
00001A7A  6700 16D6               1227              BEQ     DATA_R_S        *Dn
00001A7E  BE3C 0001               1228              CMP.B   #$1,D7
00001A82  6700 14E8               1229              BEQ     ADDY_R_SNP      *An
00001A86  BE3C 0002               1230              CMP.B   #$2,D7
00001A8A  6700 1528               1231              BEQ     ADDY_R_SP       *(An)
00001A8E  BE3C 0003               1232              CMP.B   #$3,D7
00001A92  6700 159A               1233              BEQ     ADDY_R_SPI      *(An)+
00001A96  BE3C 0004               1234              CMP.B   #$4,D7
00001A9A  6700 1624               1235              BEQ     ADDY_R_SPD      *-(An)
00001A9E  BE3C 0007               1236              CMP.B   #$7,D7
00001AA2  6700 0006               1237              BEQ     AI_M_S      *immediate or absolut addy
00001AA6  6000 175A               1238              BRA     EXIT
00001AAA                          1239  
00001AAA                          1240  AI_M_S
00001AAA  3E12                    1241              MOVE.W  (A2),D7
00001AAC  760D                    1242              MOVE.L  #13,D3
00001AAE  E76F                    1243              LSL.W   D3,D7
00001AB0  E66F                    1244              LSR.W   D3,D7
00001AB2  BE3C 0000               1245              CMP.B   #$0,D7
00001AB6  6700 13E4               1246              BEQ     W_ADDY *absolute addy word
00001ABA  BE3C 0001               1247              CMP.B   #$1,D7
00001ABE  6700 13FC               1248              BEQ     L_ADDY *absolute addy long
00001AC2  BE3C 0004               1249              CMP.B   #$4,D7
00001AC6  6700 0006               1250              BEQ     ADDA_IMM_DATA_S *immediate data
00001ACA                          1251              
00001ACA  6000 1736               1252              BRA     EXIT
00001ACE                          1253  
00001ACE                          1254               
00001ACE                          1255  ADDA_IMM_DATA_S            
00001ACE  3E12                    1256              MOVE.W  (A2),D7
00001AD0  EF4F                    1257              LSL.W   #7,D7   *shift D7 to right 10 to get the opmode
00001AD2  760D                    1258              MOVE.L  #13,D3
00001AD4  E66F                    1259              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001AD6                          1260              *check if opmode bits are 3 or 7
00001AD6  548C                    1261              ADDA.L  #$2,A4 
00001AD8  BE3C 0003               1262              CMP.B   #$3,D7
00001ADC  6700 144A               1263              BEQ     IMM_DATA_SW
00001AE0  BE3C 0007               1264              CMP.B   #$7,D7
00001AE4  6700 141C               1265              BEQ     IMM_DATA_SL
00001AE8  6000 1718               1266              BRA     EXIT
00001AEC                          1267              
00001AEC                          1268              
00001AEC                          1269  T_ADDA_PRINT_SRC_EA *test if ADDA EA is valid or not
00001AEC  3E12                    1270              MOVE.W  (A2),D7
00001AEE  760A                    1271              MOVE.L  #10,D3
00001AF0  E76F                    1272              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001AF2  760D                    1273              MOVE.L  #13,D3
00001AF4  E66F                    1274              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001AF6                          1275  
00001AF6  BE3C 0000               1276              CMP.B   #$0,D7          *mode is Dn
00001AFA  6700 1310               1277              BEQ     GOOD            *ea valid
00001AFE  BE3C 0001               1278              CMP.B   #$1,D7          
00001B02  6700 1308               1279              BEQ     GOOD
00001B06  BE3C 0002               1280              CMP.B   #$2,D7             *mode is (An)
00001B0A  6700 1300               1281              BEQ     GOOD       *(An) 
00001B0E  BE3C 0003               1282              CMP.B   #$3,D7
00001B12  6700 12F8               1283              BEQ     GOOD      *(An)+
00001B16  BE3C 0004               1284              CMP.B   #$4,D7
00001B1A  6700 12F0               1285              BEQ     GOOD      *-(An)
00001B1E  BE3C 0007               1286              CMP.B   #$7,D7
00001B22  6700 0006               1287              BEQ     T_ADDA_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
00001B26  6000 16C0               1288              BRA     INVALID_EA
00001B2A                          1289              
00001B2A                          1290  T_ADDA_IMM_REG_S *EA is source for subtract opcode
00001B2A  3E12                    1291              MOVE.W  (A2),D7
00001B2C  760D                    1292              MOVE.L  #13,D3
00001B2E  E76F                    1293              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001B30  E66F                    1294              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001B32                          1295              
00001B32  BE3C 0000               1296              CMP.B   #$0,D7
00001B36  6700 12D4               1297              BEQ     GOOD  *word absolute address
00001B3A  BE3C 0001               1298              CMP.B   #$1,D7
00001B3E  6700 12CC               1299              BEQ     GOOD  *long absolute address
00001B42  BE3C 0004               1300              CMP.B   #$4,D7
00001B46  6700 12C4               1301              BEQ     GOOD 
00001B4A                          1302              
00001B4A  6000 169C               1303              BRA     INVALID_EA  
00001B4E                          1304  
00001B4E                          1305  ADDA_SIZE_SUB                           * ADDA SIZE SUBROUTINE START
00001B4E                          1306              * SHIFT TO SIZE FIELD
00001B4E  EF4F                    1307              LSL.W   #7,D7
00001B50  760D                    1308              MOVE.L  #13,D3
00001B52  E66F                    1309              LSR.W   D3,D7
00001B54                          1310              * RUN COMPARISONS
00001B54  BE3C 0003               1311              CMP.B   #$3,D7
00001B58  6700 166E               1312              BEQ     WORD
00001B5C  BE3C 0007               1313              CMP.B   #$7,D7
00001B60  6700 1676               1314              BEQ     LONG
00001B64                          1315              
00001B64  6000 1682               1316              BRA     INVALID_EA
00001B68                          1317              
00001B68                          1318              
00001B68                          1319  MATCH_ADDQ
00001B68                          1320              
00001B68  3E12                    1321              MOVE.W  (A2),D7
00001B6A  EE0F                    1322              LSR.B   #7,D7
00001B6C  BE3C 0002               1323              CMP.B   #$2,D7  *check if size bits are greater than 2 if so then NOOP
00001B70  6E00 F68C               1324              BGT     NOOP    
00001B74  220A                    1325              MOVE.L  A2,D1
00001B76  143C 0010               1326              MOVE.B  #16,D2
00001B7A  103C 000F               1327              MOVE.B  #15,D0
00001B7E  4E4F                    1328              TRAP    #15
00001B80                          1329              
00001B80  43F9 000033A8           1330              LEA     MSG_ADDQ,A1 *print ADDQ 
00001B86  103C 000E               1331              MOVE.B  #14,D0
00001B8A  4E4F                    1332              TRAP    #15
00001B8C                          1333              
00001B8C                          1334              
00001B8C                          1335              * PRINT SIZE
00001B8C  3E12                    1336              MOVE.W  (A2),D7
00001B8E  48E7 0120               1337              MOVEM.L A2/D7,-(SP)
00001B92  4EB9 00001BEE           1338              JSR     ADDQ_SIZE_SUB
00001B98  4CDF 0480               1339              MOVEM.L (SP)+,A2/D7
00001B9C                          1340              
00001B9C  43F9 0000330B           1341              LEA     SPACE,A1        
00001BA2  103C 000E               1342              MOVE.B  #14,D0
00001BA6  4E4F                    1343              TRAP    #15
00001BA8                          1344              
00001BA8                          1345              * TEST PRINT EFFECTIVE ADDRESS
00001BA8  48E7 0120               1346              MOVEM.L A2/D7,-(SP)
00001BAC  4EB9 00001C38           1347              JSR     T_PRINT_EA_FSIXB
00001BB2  4CDF 0480               1348              MOVEM.L (SP)+,A2/D7
00001BB6                          1349              
00001BB6  BC3C 0001               1350              CMP.B   #$1,D6                 *if D6 has $1 that means that the test failed and now print INVALID EA    
00001BBA  6700 1634               1351              BEQ     INVAL_EA_NO_RTS
00001BBE                          1352              
00001BBE                          1353              
00001BBE                          1354              * TODO: PRINT DATA
00001BBE                          1355              * GET DATA
00001BBE  48E7 0120               1356              MOVEM.L A2/D7,-(SP)
00001BC2  4EB9 00001C0C           1357              JSR     ADDQ_DATA_SUB
00001BC8  4CDF 0480               1358              MOVEM.L (SP)+,A2/D7
00001BCC                          1359              
00001BCC                          1360              * PRINT COMMA
00001BCC  43F9 0000338E           1361              LEA     MSG_COMMA,A1
00001BD2  103C 000E               1362              MOVE.B  #14,D0
00001BD6  4E4F                    1363              TRAP    #15
00001BD8                          1364              
00001BD8                          1365              * PRINT EFFECTIVE ADDRESS
00001BD8  48E7 0120               1366              MOVEM.L A2/D7,-(SP)
00001BDC  4EB9 00001C8E           1367              JSR     PRINT_EA_FSIXB
00001BE2  4CDF 0480               1368              MOVEM.L (SP)+,A2/D7
00001BE6                          1369  
00001BE6  244C                    1370              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
00001BE8  548A                    1371              ADDA.L  #$2,A2          * Increase counter by long
00001BEA                          1372              
00001BEA                          1373  
00001BEA  6000 F64C               1374              BRA     INCREMENT       * Branch back up to main loop
00001BEE                          1375  
00001BEE                          1376  
00001BEE                          1377  ADDQ_SIZE_SUB             * ADDQ SIZE SUBROUTINE START
00001BEE                          1378              * SHIFT TO SIZE FIELD
00001BEE  EC0F                    1379              LSR.B   #6,D7
00001BF0                          1380              
00001BF0                          1381              * RUN COMPARISONS
00001BF0  BE3C 0000               1382              CMP.B   #$0,D7
00001BF4  6700 15C2               1383              BEQ     BYTE
00001BF8  BE3C 0001               1384              CMP.B   #$1,D7
00001BFC  6700 15CA               1385              BEQ     WORD
00001C00  BE3C 0002               1386              CMP.B   #$2,D7
00001C04  6700 15D2               1387              BEQ     LONG
00001C08  6000 15F8               1388              BRA     EXIT
00001C0C                          1389              
00001C0C                          1390  ADDQ_DATA_SUB
00001C0C                          1391              * PRINT # SYMBOL
00001C0C  43F9 000033E0           1392              LEA     HASH_SIGN,A1
00001C12  103C 000E               1393              MOVE.B  #14,D0
00001C16  4E4F                    1394              TRAP    #15
00001C18                          1395              
00001C18  43F9 000033DE           1396              LEA     HEX_SIGN,A1
00001C1E  4E4F                    1397              TRAP    #15
00001C20                          1398              
00001C20                          1399              * SHIFT TO DATA
00001C20  E94F                    1400              LSL.W   #4,D7
00001C22  163C 000D               1401              MOVE.B  #13,D3
00001C26  E66F                    1402              LSR.W   D3,D7
00001C28                          1403              
00001C28                          1404              * PRINT DATA
00001C28  143C 0010               1405              MOVE.B  #16,D2
00001C2C  3207                    1406              MOVE.W  D7,D1
00001C2E  103C 000F               1407              MOVE.B  #15,D0
00001C32  4E4F                    1408              TRAP    #15
00001C34                          1409          
00001C34  6000 15CC               1410              BRA     EXIT
00001C38                          1411  
00001C38                          1412  
00001C38                          1413  T_PRINT_EA_FSIXB         *test for first 6 bits ea which is destination
00001C38  3E12                    1414              MOVE.W  (A2),D7
00001C3A  E50F                    1415              LSL.B   #2,D7   *get rid of destination mode bits
00001C3C  EA0F                    1416              LSR.B   #5,D7   *move source mode bits to first 3 bits of D7 
00001C3E  BE3C 0000               1417              CMP.B   #$0,D7
00001C42  6700 11C8               1418              BEQ     GOOD      
00001C46  BE3C 0001               1419              CMP.B   #$1,D7
00001C4A  6700 11C0               1420              BEQ     GOOD            *An
00001C4E  BE3C 0002               1421              CMP.B   #$2,D7
00001C52  6700 11B8               1422              BEQ     GOOD             *(An)
00001C56  BE3C 0003               1423              CMP.B   #$3,D7
00001C5A  6700 11B0               1424              BEQ     GOOD            *(An)+
00001C5E  BE3C 0004               1425              CMP.B   #$4,D7
00001C62  6700 11A8               1426              BEQ     GOOD            *-(An)
00001C66  BE3C 0007               1427              CMP.B   #$7,D7
00001C6A  6700 0006               1428              BEQ     T_IMM_REG_FSIXB
00001C6E  6000 1578               1429              BRA     INVALID_EA 
00001C72                          1430              
00001C72                          1431  T_IMM_REG_FSIXB     *first 6 bits EA immediate data or address
00001C72  4287                    1432              CLR.L     D7
00001C74  3E12                    1433              MOVE.W  (A2),D7         *get A2 data back to D7
00001C76  EB0F                    1434              LSL.B   #5,D7   *get rid of destination mode bits and source mode bits
00001C78  EA0F                    1435              LSR.B   #5,D7   *move source register bits to first 3 bits of D7 
00001C7A  BE3C 0000               1436              CMP.B   #$0,D7
00001C7E  6700 118C               1437              BEQ     GOOD  *word absolute address
00001C82  BE3C 0001               1438              CMP.B   #$1,D7
00001C86  6700 1184               1439              BEQ     GOOD  *long absolute address
00001C8A  6000 155C               1440              BRA     INVALID_EA
00001C8E                          1441  
00001C8E                          1442  PRINT_EA_FSIXB      *print what first 6 bits EA represent
00001C8E  E50F                    1443              LSL.B   #2,D7   *get rid of destination mode bits
00001C90  EA0F                    1444              LSR.B   #5,D7   *move source mode bits to first 3 bits of D7 
00001C92  BE3C 0000               1445              CMP.B   #$0,D7
00001C96  6700 14BA               1446              BEQ     DATA_R_S        *Dn
00001C9A  BE3C 0001               1447              CMP.B   #$1,D7
00001C9E  6700 12CC               1448              BEQ     ADDY_R_SNP      *An
00001CA2  BE3C 0002               1449              CMP.B   #$2,D7
00001CA6  6700 130C               1450              BEQ     ADDY_R_SP       *(An)
00001CAA  BE3C 0003               1451              CMP.B   #$3,D7
00001CAE  6700 137E               1452              BEQ     ADDY_R_SPI      *(An)+
00001CB2  BE3C 0004               1453              CMP.B   #$4,D7
00001CB6  6700 1408               1454              BEQ     ADDY_R_SPD      *-(An)
00001CBA  BE3C 0007               1455              CMP.B   #$7,D7
00001CBE  6700 0006               1456              BEQ     IMM_REG_FSIXB
00001CC2  6000 1524               1457              BRA     INVALID_EA  
00001CC6                          1458              
00001CC6                          1459  IMM_REG_FSIXB     *first 6 bits EA immediate data or address
00001CC6  4287                    1460              CLR.L     D7
00001CC8  3E12                    1461              MOVE.W  (A2),D7         *get A2 data back to D7
00001CCA  EB0F                    1462              LSL.B   #5,D7   *get rid of destination mode bits and source mode bits
00001CCC  EA0F                    1463              LSR.B   #5,D7   *move source register bits to first 3 bits of D7 
00001CCE  BE3C 0000               1464              CMP.B   #$0,D7
00001CD2  6700 11C8               1465              BEQ     W_ADDY  *word absolute address
00001CD6  BE3C 0001               1466              CMP.B   #$1,D7
00001CDA  6700 11E0               1467              BEQ     L_ADDY  *long absolute address
00001CDE  6000 1508               1468              BRA     INVALID_EA  
00001CE2                          1469  
00001CE2                          1470  
00001CE2                          1471  
00001CE2                          1472  *-----------------------------------------------------------
00001CE2                          1473  * Test to see if we have a matching SUB op code. If so
00001CE2                          1474  * print out the memory address and the op code.
00001CE2                          1475  *-----------------------------------------------------------
00001CE2                          1476  MATCH_SUB
00001CE2  220A                    1477              MOVE.L  A2,D1
00001CE4  143C 0010               1478              MOVE.B  #16,D2
00001CE8  103C 000F               1479              MOVE.B  #15,D0
00001CEC  4E4F                    1480              TRAP    #15
00001CEE                          1481              
00001CEE  3E12                    1482              MOVE.W (A2),D7
00001CF0                          1483                          
00001CF0  43F9 000033B0           1484              LEA     MSG_SUB,A1
00001CF6  103C 000E               1485              MOVE.B  #14,D0
00001CFA  4E4F                    1486              TRAP    #15
00001CFC  3E12                    1487              MOVE.W  (A2),D7
00001CFE                          1488              
00001CFE                          1489              *GET SIZE SUB
00001CFE  48E7 0120               1490              MOVEM.L A2/D7,-(SP)
00001D02  4EB9 00001D7E           1491              JSR     SUBT_SIZE_SUB
00001D08  4CDF 0480               1492              MOVEM.L (SP)+,A2/D7
00001D0C                          1493              
00001D0C  43F9 0000330B           1494              LEA     SPACE,A1        
00001D12  103C 000E               1495              MOVE.B  #14,D0
00001D16  4E4F                    1496              TRAP    #15
00001D18                          1497              
00001D18                          1498               *TEST GET SOURCE SUB
00001D18  3E12                    1499              MOVE.W  (A2),D7
00001D1A  48E7 0120               1500              MOVEM.L A2/D7,-(SP)
00001D1E  4EB9 00001E3A           1501              JSR     T_SUBTR_PRINT_SRC_EA
00001D24  4CDF 0480               1502              MOVEM.L (SP)+,A2/D7
00001D28                          1503              
00001D28  BC3C 0001               1504              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
00001D2C                          1505  
00001D2C  6700 14C2               1506              BEQ     INVAL_EA_NO_RTS     
00001D30                          1507              
00001D30                          1508              
00001D30                          1509              * TEST PRINT DEST MODE AND REGISTER
00001D30  3E12                    1510              MOVE.W  (A2),D7
00001D32  48E7 0120               1511              MOVEM.L A2/D7,-(SP)
00001D36  4EB9 00001E78           1512              JSR     T_SUBTR_PRINT_DEST_EA
00001D3C  4CDF 0480               1513              MOVEM.L (SP)+,A2/D7
00001D40                          1514              
00001D40  BC3C 0001               1515              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
00001D44                          1516  
00001D44  6700 14AA               1517              BEQ     INVAL_EA_NO_RTS
00001D48                          1518              
00001D48                          1519  
00001D48                          1520              *GET SOURCE SUB
00001D48  3E12                    1521              MOVE.W  (A2),D7
00001D4A  48E7 0120               1522              MOVEM.L A2/D7,-(SP)
00001D4E  4EB9 00002026           1523              JSR     SUBTR_PRINT_SRC_EA
00001D54  4CDF 0480               1524              MOVEM.L (SP)+,A2/D7
00001D58                          1525              
00001D58                          1526               * PRINT COMMA
00001D58  43F9 0000338E           1527              LEA     MSG_COMMA,A1
00001D5E  103C 000E               1528              MOVE.B  #14,D0
00001D62  4E4F                    1529              TRAP    #15
00001D64                          1530              
00001D64                          1531              * PRINT DEST MODE AND REGISTER
00001D64  3E12                    1532              MOVE.W  (A2),D7
00001D66  48E7 0120               1533              MOVEM.L A2/D7,-(SP)
00001D6A  4EB9 0000205E           1534              JSR     SUBTR_PRINT_DEST_EA
00001D70  4CDF 0480               1535              MOVEM.L (SP)+,A2/D7
00001D74                          1536  
00001D74                          1537              
00001D74  244C                    1538              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
00001D76  548A                    1539              ADDA.L  #$2,A2          * Increase counter by long
00001D78  4287                    1540              CLR.L   D7
00001D7A                          1541  
00001D7A                          1542  
00001D7A  6000 F4BC               1543              BRA     INCREMENT       * Branch back up to main loop
00001D7E                          1544  
00001D7E                          1545  SUBT_SIZE_SUB   *print the size of subtract
00001D7E  3E12                    1546              MOVE.W  (A2),D7
00001D80  EF4F                    1547              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00001D82  363C 000D               1548              MOVE.W  #13,D3
00001D86  E66F                    1549              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00001D88  BE3C 0000               1550              CMP.B   #$0,D7
00001D8C  6700 142A               1551              BEQ     BYTE
00001D90  BE3C 0001               1552              CMP.B   #$1,D7
00001D94  6700 1432               1553              BEQ     WORD
00001D98  BE3C 0002               1554              CMP.B   #$2,D7
00001D9C  6700 143A               1555              BEQ     LONG
00001DA0  BE3C 0004               1556              CMP.B   #$4,D7
00001DA4  6700 1412               1557              BEQ     BYTE
00001DA8  BE3C 0005               1558              CMP.B   #$5,D7
00001DAC  6700 141A               1559              BEQ     WORD
00001DB0  BE3C 0006               1560              CMP.B   #$6,D7
00001DB4  6700 1422               1561              BEQ     LONG
00001DB8  6000 1448               1562              BRA     EXIT
00001DBC                          1563              *ELSE BRANCH TO INVALID EA
00001DBC                          1564  
00001DBC                          1565  T_SOURCE_SUBTR_EA  
00001DBC  3E12                    1566              MOVE.W  (A2),D7
00001DBE  760A                    1567              MOVE.L  #10,D3
00001DC0  E76F                    1568              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001DC2  760D                    1569              MOVE.L  #13,D3
00001DC4  E66F                    1570              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001DC6                          1571  
00001DC6  BE3C 0000               1572              CMP.B   #$0,D7          *mode is Dn
00001DCA  6700 1040               1573              BEQ     GOOD
00001DCE  BE3C 0001               1574              CMP.B   #$1,D7          
00001DD2  6700 0140               1575              BEQ     T_SUBTR_ADDY_R_SNP
00001DD6  BE3C 0002               1576              CMP.B   #$2,D7             *mode is (An)
00001DDA  6700 1030               1577              BEQ     GOOD       *(An) 
00001DDE  BE3C 0003               1578              CMP.B   #$3,D7
00001DE2  6700 1028               1579              BEQ     GOOD      *(An)+
00001DE6  BE3C 0004               1580              CMP.B   #$4,D7
00001DEA  6700 1020               1581              BEQ     GOOD      *-(An)
00001DEE  BE3C 0007               1582              CMP.B   #$7,D7
00001DF2  6700 00C0               1583              BEQ     T_SUBTR_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
00001DF6  6000 13F0               1584              BRA     INVALID_EA
00001DFA                          1585  
00001DFA                          1586  T_DEST_SUBTR_EA  
00001DFA  4287                    1587              CLR.L   D7
00001DFC  3E12                    1588              MOVE.W  (A2),D7
00001DFE  760A                    1589              MOVE.L  #10,D3
00001E00  E76F                    1590              LSL.W   D3,D7   *shift D7 to right 10 to get the mode
00001E02  760D                    1591              MOVE.L  #13,D3
00001E04  E66F                    1592              LSR.W   D3,D7   *shift D7 to right 13 to get the mode
00001E06                          1593  
00001E06  BE3C 0000               1594              CMP.B   #$0,D7          *mode is Dn
00001E0A  6700 1000               1595              BEQ     GOOD 
00001E0E  BE3C 0001               1596              CMP.B   #$1,D7          
00001E12  6700 0100               1597              BEQ     T_SUBTR_ADDY_R_SNP
00001E16  BE3C 0002               1598              CMP.B   #$2,D7             *mode is (An)
00001E1A  6700 0FF0               1599              BEQ     GOOD      *(An) 
00001E1E  BE3C 0003               1600              CMP.B   #$3,D7
00001E22  6700 0FE8               1601              BEQ     GOOD      *(An)+
00001E26  BE3C 0004               1602              CMP.B   #$4,D7
00001E2A  6700 0FE0               1603              BEQ     GOOD      *-(An)
00001E2E  BE3C 0007               1604              CMP.B   #$7,D7
00001E32  6700 010C               1605              BEQ     T_SUBTR_IMM_REG_D      *(xxx).W or (xxx).L
00001E36  6000 13B0               1606              BRA     INVALID_EA
00001E3A                          1607              
00001E3A                          1608  T_SUBTR_PRINT_SRC_EA
00001E3A  4287                    1609              CLR.L   D7
00001E3C  3E12                    1610              MOVE.W  (A2),D7
00001E3E  EF4F                    1611              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00001E40  760D                    1612              MOVE.L  #13,D3
00001E42  E66F                    1613              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00001E44                          1614              
00001E44  BE3C 0000               1615              CMP.B   #$0,D7
00001E48  6700 FF72               1616              BEQ     T_SOURCE_SUBTR_EA  *DEST ea is DN
00001E4C  BE3C 0001               1617              CMP.B   #$1,D7
00001E50  6700 FF6A               1618              BEQ     T_SOURCE_SUBTR_EA  *DEST ea is DN
00001E54  BE3C 0002               1619              CMP.B   #$2,D7
00001E58  6700 FF62               1620              BEQ     T_SOURCE_SUBTR_EA  *DEST ea is DN
00001E5C  BE3C 0004               1621              CMP.B   #$4,D7
00001E60  6700 0FAA               1622              BEQ     GOOD   *SOURCE ea is DN
00001E64  BE3C 0005               1623              CMP.B   #$5,D7
00001E68  6700 0FA2               1624              BEQ     GOOD   *SOURCE ea is DN
00001E6C  BE3C 0006               1625              CMP.B   #$6,D7
00001E70  6700 0F9A               1626              BEQ     GOOD  *SOURCE ea is DN
00001E74  6000 1372               1627              BRA     INVALID_EA
00001E78                          1628              
00001E78                          1629              
00001E78                          1630  
00001E78                          1631  T_SUBTR_PRINT_DEST_EA
00001E78  3E12                    1632              MOVE.W  (A2),D7
00001E7A  EF4F                    1633              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00001E7C  760D                    1634              MOVE.L  #13,D3
00001E7E  E66F                    1635              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00001E80                          1636              
00001E80  BE3C 0000               1637              CMP.B   #$0,D7
00001E84  6700 0F86               1638              BEQ     GOOD  *DEST ea is DN
00001E88  BE3C 0001               1639              CMP.B   #$1,D7
00001E8C  6700 0F7E               1640              BEQ     GOOD  *DEST ea is DN
00001E90  BE3C 0002               1641              CMP.B   #$2,D7
00001E94  6700 0F76               1642              BEQ     GOOD  *DEST ea is DN
00001E98  BE3C 0004               1643              CMP.B   #$4,D7
00001E9C  6700 FF5C               1644              BEQ     T_DEST_SUBTR_EA   *source ea is DN
00001EA0  BE3C 0005               1645              CMP.B   #$5,D7
00001EA4  6700 FF54               1646              BEQ     T_DEST_SUBTR_EA   *source ea is DN
00001EA8  BE3C 0006               1647              CMP.B   #$6,D7
00001EAC  6700 FF4C               1648              BEQ     T_DEST_SUBTR_EA   *source ea is DN
00001EB0  6000 1336               1649              BRA     INVALID_EA
00001EB4                          1650  
00001EB4                          1651  T_SUBTR_IMM_REG_S *EA is source for subtract opcode
00001EB4  3E12                    1652              MOVE.W  (A2),D7
00001EB6  760D                    1653              MOVE.L  #13,D3
00001EB8  E76F                    1654              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001EBA  E66F                    1655              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001EBC                          1656              
00001EBC  BE3C 0000               1657              CMP.B   #$0,D7
00001EC0  6700 0F4A               1658              BEQ     GOOD  *word absolute address
00001EC4  BE3C 0001               1659              CMP.B   #$1,D7
00001EC8  6700 0F42               1660              BEQ     GOOD  *long absolute address
00001ECC  BE3C 0004               1661              CMP.B   #$4,D7
00001ED0  6700 0006               1662              BEQ     T_SUBTR_IMM_DATA_S 
00001ED4                          1663              
00001ED4  6000 1312               1664              BRA     INVALID_EA
00001ED8                          1665              
00001ED8                          1666  T_SUBTR_IMM_DATA_S
00001ED8                          1667              
00001ED8  3E14                    1668              MOVE.W  (A4),D7
00001EDA  EF4F                    1669              LSL.W   #7,D7
00001EDC  760D                    1670              MOVE.L  #13,D3
00001EDE                          1671              
00001EDE  E66F                    1672              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00001EE0  BE3C 0000               1673              CMP.B   #$0,D7
00001EE4  6700 0F26               1674              BEQ     GOOD
00001EE8  BE3C 0001               1675              CMP.B   #$1,D7
00001EEC  6700 0F1E               1676              BEQ     GOOD
00001EF0  BE3C 0002               1677              CMP.B   #$2,D7
00001EF4  6700 0F16               1678              BEQ     GOOD
00001EF8  BE3C 0004               1679              CMP.B   #$4,D7
00001EFC  6700 0F0E               1680              BEQ     GOOD
00001F00  BE3C 0005               1681              CMP.B   #$5,D7
00001F04  6700 0F06               1682              BEQ     GOOD
00001F08  BE3C 0006               1683              CMP.B   #$6,D7
00001F0C  6700 0EFE               1684              BEQ     GOOD
00001F10                          1685              *if neither then it is an error
00001F10  6000 12D6               1686              BRA     INVALID_EA
00001F14                          1687  
00001F14                          1688  T_SUBTR_ADDY_R_SNP    *An but cannot be byte for opcode size of subtr
00001F14  3E14                    1689              MOVE.W  (A4),D7
00001F16  EF4F                    1690              LSL.W   #7,D7
00001F18                          1691              
00001F18  760D                    1692              MOVE.L  #13,D3
00001F1A  E66F                    1693              LSR.W   D3,D7
00001F1C  BE3C 0001               1694              CMP.B   #$1,D7
00001F20  6700 0EEA               1695              BEQ     GOOD 
00001F24  BE3C 0002               1696              CMP.B   #$2,D7
00001F28  6700 0EE2               1697              BEQ     GOOD
00001F2C  BE3C 0005               1698              CMP.B   #$5,D7
00001F30  6700 0EDA               1699              BEQ     GOOD
00001F34  BE3C 0006               1700              CMP.B   #$6,D7
00001F38  6700 0ED2               1701              BEQ     GOOD
00001F3C                          1702              *INVALID EA
00001F3C  6000 12AA               1703              BRA     INVALID_EA
00001F40                          1704  
00001F40                          1705              
00001F40                          1706  T_SUBTR_IMM_REG_D *EA is destination for subtract opcode
00001F40  3E12                    1707              MOVE.W  (A2),D7
00001F42  760D                    1708              MOVE.L  #13,D3
00001F44  E76F                    1709              LSL.W   D3,D7   *shift D7 to left 13 to get the register
00001F46  E66F                    1710              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001F48                          1711              
00001F48  BE3C 0000               1712              CMP.B   #$0,D7
00001F4C  6700 0EBE               1713              BEQ     GOOD  *word absolute address
00001F50  BE3C 0001               1714              CMP.B   #$1,D7
00001F54  6700 0EB6               1715              BEQ     GOOD  *long absolute address
00001F58  6000 128E               1716              BRA     INVALID_EA
00001F5C                          1717  
00001F5C                          1718  
00001F5C                          1719  SOURCE_SUBTR_EA  
00001F5C  3E12                    1720              MOVE.W  (A2),D7
00001F5E  760A                    1721              MOVE.L  #10,D3
00001F60  E76F                    1722              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00001F62  760D                    1723              MOVE.L  #13,D3
00001F64  E66F                    1724              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001F66                          1725  
00001F66  BE3C 0000               1726              CMP.B   #$0,D7          *mode is Dn
00001F6A  6700 0094               1727              BEQ     F_SUBTR_DN_SRC 
00001F6E  BE3C 0001               1728              CMP.B   #$1,D7          mode is An NOT ALLOWED
00001F72  6700 0188               1729              BEQ     SUBTR_ADDY_R_SNP
00001F76  BE3C 0002               1730              CMP.B   #$2,D7             *mode is (An)
00001F7A  6700 1038               1731              BEQ     ADDY_R_SP       *(An) 
00001F7E  BE3C 0003               1732              CMP.B   #$3,D7
00001F82  6700 10AA               1733              BEQ     ADDY_R_SPI      *(An)+
00001F86  BE3C 0004               1734              CMP.B   #$4,D7
00001F8A  6700 1134               1735              BEQ     ADDY_R_SPD      *-(An)
00001F8E  BE3C 0007               1736              CMP.B   #$7,D7
00001F92  6700 0106               1737              BEQ     SUBTR_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
00001F96  6000 1250               1738              BRA     INVALID_EA
00001F9A                          1739  
00001F9A                          1740  DEST_SUBTR_EA  
00001F9A  4287                    1741              CLR.L   D7
00001F9C  3E12                    1742              MOVE.W  (A2),D7
00001F9E  760A                    1743              MOVE.L  #10,D3
00001FA0  E76F                    1744              LSL.W   D3,D7   *shift D7 to right 10 to get the mode
00001FA2  760D                    1745              MOVE.L  #13,D3
00001FA4  E66F                    1746              LSR.W   D3,D7   *shift D7 to right 13 to get the mode
00001FA6                          1747  
00001FA6  BE3C 0000               1748              CMP.B   #$0,D7          *mode is Dn
00001FAA  6700 002E               1749              BEQ     F_SUBTR_DN 
00001FAE  BE3C 0001               1750              CMP.B   #$1,D7          
00001FB2  6700 0148               1751              BEQ     SUBTR_ADDY_R_SNP
00001FB6  BE3C 0002               1752              CMP.B   #$2,D7             *mode is (An)
00001FBA  6700 0FF8               1753              BEQ     ADDY_R_SP       *(An) 
00001FBE  BE3C 0003               1754              CMP.B   #$3,D7
00001FC2  6700 106A               1755              BEQ     ADDY_R_SPI      *(An)+
00001FC6  BE3C 0004               1756              CMP.B   #$4,D7
00001FCA  6700 10F4               1757              BEQ     ADDY_R_SPD      *-(An)
00001FCE  BE3C 0007               1758              CMP.B   #$7,D7
00001FD2  6700 0154               1759              BEQ     SUBTR_IMM_REG_D      *(xxx).W or (xxx).L
00001FD6  6000 1210               1760              BRA     INVALID_EA
00001FDA                          1761  
00001FDA                          1762  F_SUBTR_DN
00001FDA  4287                    1763              CLR.L   D7
00001FDC  3E12                    1764              MOVE.W  (A2),D7
00001FDE  E94F                    1765              LSL.W   #4,D7   *get rid of first 6 bits of sub opcode
00001FE0  760D                    1766              MOVE.L  #13,D3
00001FE2  E66F                    1767              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00001FE4  43F9 000033D6           1768              LEA     MSG_D,A1
00001FEA  103C 000E               1769              MOVE.B  #14,D0
00001FEE  4E4F                    1770              TRAP    #15
00001FF0  4281                    1771              CLR.L   D1
00001FF2  7410                    1772              MOVE.L  #16,D2
00001FF4  3207                    1773              MOVE.W  D7,D1
00001FF6  103C 000F               1774              MOVE.B  #15,D0
00001FFA  4E4F                    1775              TRAP    #15
00001FFC  6000 1204               1776              BRA EXIT      
00002000                          1777  
00002000                          1778  F_SUBTR_DN_SRC
00002000  4287                    1779              CLR.L   D7
00002002  3E12                    1780              MOVE.W  (A2),D7
00002004  760D                    1781              MOVE.L  #13,D3
00002006  E76F                    1782              LSL.W   D3,D7   *get rid of first 6 bits of sub opcode
00002008  E66F                    1783              LSR.W   D3,D7   *shift D7 to right 13 to get the register
0000200A  43F9 000033D6           1784              LEA     MSG_D,A1
00002010  103C 000E               1785              MOVE.B  #14,D0
00002014  4E4F                    1786              TRAP    #15
00002016  4281                    1787              CLR.L   D1
00002018  7410                    1788              MOVE.L  #16,D2
0000201A  3207                    1789              MOVE.W  D7,D1
0000201C  103C 000F               1790              MOVE.B  #15,D0
00002020  4E4F                    1791              TRAP    #15
00002022  6000 11DE               1792              BRA EXIT              
00002026                          1793              
00002026                          1794  SUBTR_PRINT_SRC_EA
00002026  4287                    1795              CLR.L   D7
00002028  3E12                    1796              MOVE.W  (A2),D7
0000202A  EF4F                    1797              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
0000202C  760D                    1798              MOVE.L  #13,D3
0000202E  E66F                    1799              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002030                          1800              
00002030  BE3C 0000               1801              CMP.B   #$0,D7
00002034  6700 FF26               1802              BEQ     SOURCE_SUBTR_EA  *DEST ea is DN
00002038  BE3C 0001               1803              CMP.B   #$1,D7
0000203C  6700 FF1E               1804              BEQ     SOURCE_SUBTR_EA  *DEST ea is DN
00002040  BE3C 0002               1805              CMP.B   #$2,D7
00002044  6700 FF16               1806              BEQ     SOURCE_SUBTR_EA  *DEST ea is DN
00002048  BE3C 0004               1807              CMP.B   #$4,D7
0000204C  678C                    1808              BEQ     F_SUBTR_DN   *SOURCE ea is DN
0000204E  BE3C 0005               1809              CMP.B   #$5,D7
00002052  6786                    1810              BEQ     F_SUBTR_DN   *SOURCE ea is DN
00002054  BE3C 0006               1811              CMP.B   #$6,D7
00002058  6780                    1812              BEQ     F_SUBTR_DN   *SOURCE ea is DN
0000205A  6000 118C               1813              BRA     INVALID_EA
0000205E                          1814  
0000205E                          1815  SUBTR_PRINT_DEST_EA
0000205E  3E12                    1816              MOVE.W  (A2),D7
00002060  EF4F                    1817              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00002062  760D                    1818              MOVE.L  #13,D3
00002064  E66F                    1819              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002066                          1820              
00002066  BE3C 0000               1821              CMP.B   #$0,D7
0000206A  6700 FF6E               1822              BEQ     F_SUBTR_DN  *DEST ea is DN
0000206E  BE3C 0001               1823              CMP.B   #$1,D7
00002072  6700 FF66               1824              BEQ     F_SUBTR_DN  *DEST ea is DN
00002076  BE3C 0002               1825              CMP.B   #$2,D7
0000207A  6700 FF5E               1826              BEQ     F_SUBTR_DN  *DEST ea is DN
0000207E  BE3C 0004               1827              CMP.B   #$4,D7
00002082  6700 FF16               1828              BEQ     DEST_SUBTR_EA   *source ea is DN
00002086  BE3C 0005               1829              CMP.B   #$5,D7
0000208A  6700 FF0E               1830              BEQ     DEST_SUBTR_EA   *source ea is DN
0000208E  BE3C 0006               1831              CMP.B   #$6,D7
00002092  6700 FF06               1832              BEQ     DEST_SUBTR_EA   *source ea is DN
00002096  6000 1150               1833              BRA     INVALID_EA
0000209A                          1834              
0000209A                          1835  
0000209A                          1836  SUBTR_IMM_REG_S *EA is source for subtract opcode
0000209A  3E12                    1837              MOVE.W  (A2),D7
0000209C  760D                    1838              MOVE.L  #13,D3
0000209E  E76F                    1839              LSL.W   D3,D7   *shift D7 to right 13 to get the register
000020A0  E66F                    1840              LSR.W   D3,D7   *shift D7 to right 13 to get the register
000020A2                          1841              
000020A2  BE3C 0000               1842              CMP.B   #$0,D7
000020A6  6700 0DF4               1843              BEQ     W_ADDY  *word absolute address
000020AA  BE3C 0001               1844              CMP.B   #$1,D7
000020AE  6700 0E0C               1845              BEQ     L_ADDY  *long absolute address
000020B2  BE3C 0004               1846              CMP.B   #$4,D7
000020B6  6700 0006               1847              BEQ     SUBTR_IMM_DATA_S 
000020BA                          1848              
000020BA  6000 112C               1849              BRA     INVALID_EA
000020BE                          1850              
000020BE                          1851  SUBTR_IMM_DATA_S
000020BE                          1852              
000020BE  3E14                    1853              MOVE.W  (A4),D7
000020C0  EF4F                    1854              LSL.W   #7,D7
000020C2  760D                    1855              MOVE.L  #13,D3
000020C4                          1856              
000020C4  548C                    1857              ADDA.L  #$2,A4      *increment A4 by a word 
000020C6  E66F                    1858              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
000020C8  BE3C 0000               1859              CMP.B   #$0,D7
000020CC  6700 0E5A               1860              BEQ     IMM_DATA_SW
000020D0  BE3C 0001               1861              CMP.B   #$1,D7
000020D4  6700 0E52               1862              BEQ     IMM_DATA_SW
000020D8  BE3C 0002               1863              CMP.B   #$2,D7
000020DC  6700 0E24               1864              BEQ     IMM_DATA_SL
000020E0  BE3C 0004               1865              CMP.B   #$4,D7
000020E4  6700 0E42               1866              BEQ     IMM_DATA_SW
000020E8  BE3C 0005               1867              CMP.B   #$5,D7
000020EC  6700 0E3A               1868              BEQ     IMM_DATA_SW
000020F0  BE3C 0006               1869              CMP.B   #$6,D7
000020F4  6700 0E0C               1870              BEQ     IMM_DATA_SL
000020F8                          1871              *if neither then it is an error
000020F8  6000 10EE               1872              BRA     INVALID_EA
000020FC                          1873  
000020FC                          1874  SUBTR_ADDY_R_SNP    *An but cannot be byte for opcode size of subtr
000020FC  3E14                    1875              MOVE.W  (A4),D7
000020FE  EF4F                    1876              LSL.W   #7,D7
00002100                          1877              
00002100  760D                    1878              MOVE.L  #13,D3
00002102  E66F                    1879              LSR.W   D3,D7
00002104  BE3C 0001               1880              CMP.B   #$1,D7
00002108  6700 0E62               1881              BEQ     ADDY_R_SNP 
0000210C  BE3C 0002               1882              CMP.B   #$2,D7
00002110  6700 0E5A               1883              BEQ     ADDY_R_SNP
00002114  BE3C 0005               1884              CMP.B   #$5,D7
00002118  6700 0E52               1885              BEQ     ADDY_R_SNP 
0000211C  BE3C 0006               1886              CMP.B   #$6,D7
00002120  6700 0E4A               1887              BEQ     ADDY_R_SNP
00002124                          1888              *INVALID EA
00002124  6000 10C2               1889              BRA     INVALID_EA
00002128                          1890  
00002128                          1891              
00002128                          1892  SUBTR_IMM_REG_D *EA is destination for subtract opcode
00002128  3E12                    1893              MOVE.W  (A2),D7
0000212A  760D                    1894              MOVE.L  #13,D3
0000212C  E76F                    1895              LSL.W   D3,D7   *shift D7 to left 13 to get the register
0000212E  E66F                    1896              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002130                          1897              
00002130  BE3C 0000               1898              CMP.B   #$0,D7
00002134  6700 0D66               1899              BEQ     W_ADDY  *word absolute address
00002138  BE3C 0001               1900              CMP.B   #$1,D7
0000213C  6700 0D7E               1901              BEQ     L_ADDY  *long absolute address
00002140  6000 10A6               1902              BRA     INVALID_EA
00002144                          1903  
00002144                          1904  *-----------------------------------------------------------
00002144                          1905  * Test to see if we have a matching AND op code. If so
00002144                          1906  * print out the memory address and the op code.
00002144                          1907  *-----------------------------------------------------------
00002144                          1908  MATCH_AND
00002144  220A                    1909              MOVE.L  A2,D1
00002146  143C 0010               1910              MOVE.B  #16,D2
0000214A  103C 000F               1911              MOVE.B  #15,D0
0000214E  4E4F                    1912              TRAP    #15
00002150                          1913              
00002150  3E12                    1914              MOVE.W (A2),D7
00002152  E94F                    1915              LSL.W   #4,D7
00002154  760D                    1916              MOVE.L  #13,D3
00002156                          1917              
00002156                          1918              
00002156                          1919              
00002156  43F9 000033BE           1920              LEA     MSG_AND,A1
0000215C  103C 000E               1921              MOVE.B  #14,D0
00002160  4E4F                    1922              TRAP    #15
00002162  3E12                    1923              MOVE.W  (A2),D7
00002164                          1924              
00002164                          1925              *GET SIZE SUB
00002164  48E7 0120               1926              MOVEM.L A2/D7,-(SP)
00002168  4EB9 0000294A           1927              JSR     AND_SIZE_SUB
0000216E  4CDF 0480               1928              MOVEM.L (SP)+,A2/D7
00002172                          1929              
00002172  43F9 0000330B           1930              LEA     SPACE,A1        
00002178  103C 000E               1931              MOVE.B  #14,D0
0000217C  4E4F                    1932              TRAP    #15
0000217E                          1933              
0000217E                          1934               *TEST GET SOURCE SUB
0000217E  3E12                    1935              MOVE.W  (A2),D7
00002180  48E7 0120               1936              MOVEM.L A2/D7,-(SP)
00002184  4EB9 00002A06           1937              JSR     T_AND_PRINT_SRC_EA
0000218A  4CDF 0480               1938              MOVEM.L (SP)+,A2/D7
0000218E                          1939              
0000218E  BC3C 0001               1940              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
00002192                          1941  
00002192  6700 105C               1942              BEQ     INVAL_EA_NO_RTS     
00002196                          1943              
00002196                          1944              
00002196                          1945              * TEST PRINT DEST MODE AND REGISTER
00002196  3E12                    1946              MOVE.W  (A2),D7
00002198  48E7 0120               1947              MOVEM.L A2/D7,-(SP)
0000219C  4EB9 00002A44           1948              JSR     T_AND_PRINT_DEST_EA
000021A2  4CDF 0480               1949              MOVEM.L (SP)+,A2/D7
000021A6                          1950              
000021A6  BC3C 0001               1951              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
000021AA                          1952  
000021AA  6700 1044               1953              BEQ     INVAL_EA_NO_RTS
000021AE                          1954              
000021AE                          1955  
000021AE                          1956              *GET SOURCE SUB
000021AE  3E12                    1957              MOVE.W  (A2),D7
000021B0  48E7 0120               1958              MOVEM.L A2/D7,-(SP)
000021B4  4EB9 00002BCC           1959              JSR     AND_PRINT_SRC_EA
000021BA  4CDF 0480               1960              MOVEM.L (SP)+,A2/D7
000021BE                          1961              
000021BE                          1962               * PRINT COMMA
000021BE  43F9 0000338E           1963              LEA     MSG_COMMA,A1
000021C4  103C 000E               1964              MOVE.B  #14,D0
000021C8  4E4F                    1965              TRAP    #15
000021CA                          1966              
000021CA                          1967              * PRINT DEST MODE AND REGISTER
000021CA  3E12                    1968              MOVE.W  (A2),D7
000021CC  48E7 0120               1969              MOVEM.L A2/D7,-(SP)
000021D0  4EB9 00002C04           1970              JSR     AND_PRINT_DEST_EA
000021D6  4CDF 0480               1971              MOVEM.L (SP)+,A2/D7
000021DA                          1972  
000021DA                          1973              
000021DA  244C                    1974              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000021DC  548A                    1975              ADDA.L  #$2,A2          * Increase counter by long
000021DE  4287                    1976              CLR.L   D7
000021E0                          1977  
000021E0                          1978  
000021E0  6000 F056               1979              BRA     INCREMENT       * Branch back up to main loop
000021E4                          1980  
000021E4                          1981  
000021E4                          1982              
000021E4                          1983  *-----------------------------------------------------------
000021E4                          1984  * Test to see if we have a matching LEA op code. If so
000021E4                          1985  * print out the memory address and the op code.
000021E4                          1986  *-----------------------------------------------------------    
000021E4                          1987  MATCH_LEA
000021E4                          1988              
000021E4  3E12                    1989              MOVE.W  (A2),D7
000021E6  EF4F                    1990              LSL.W  #7,D7
000021E8                          1991              
000021E8  760D                    1992              MOVE.L  #13,D3
000021EA  E66F                    1993              LSR.W   D3,D7
000021EC                          1994              
000021EC  BE3C 0007               1995              CMP.B   #$7,D7  *if bits 6,7,8 are not all 1 then this is invalid LEA
000021F0  6600 F00C               1996              BNE     NOOP    
000021F4                          1997              
000021F4  220A                    1998              MOVE.L  A2,D1
000021F6  143C 0010               1999              MOVE.B  #16,D2
000021FA  103C 000F               2000              MOVE.B  #15,D0
000021FE  4E4F                    2001              TRAP    #15
00002200                          2002  
00002200  43F9 000033B7           2003              LEA     MSG_LEA,A1      * move constant DATA to A1
00002206  103C 000E               2004              MOVE.B  #14,D0          * prepare to print string in (A1)
0000220A  4E4F                    2005              TRAP    #15        
0000220C                          2006              
0000220C  43F9 0000330B           2007              LEA     SPACE,A1        * Byte displacement
00002212  103C 000E               2008              MOVE.B  #14,D0
00002216  4E4F                    2009              TRAP    #15
00002218                          2010              
00002218                          2011              
00002218                          2012              
00002218                          2013               *TEST GET SOURCE SUB
00002218  3E12                    2014              MOVE.W  (A2),D7
0000221A  48E7 0120               2015              MOVEM.L A2/D7,-(SP)
0000221E  4EB9 00002270           2016              JSR     T_LEAS_EA
00002224  4CDF 0480               2017              MOVEM.L (SP)+,A2/D7
00002228                          2018              
00002228  BC3C 0001               2019              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print 
0000222C                          2020                                          *INVALID_EA
0000222C  6700 0FC2               2021              BEQ     INVAL_EA_NO_RTS
00002230                          2022              
00002230  3E12                    2023              MOVE.W  (A2),D7
00002232  48E7 0120               2024              MOVEM.L A2/D7,-(SP)
00002236  4EB9 000022CA           2025              JSR     LEA_EAS
0000223C  4CDF 0480               2026              MOVEM.L (SP)+,A2/D7
00002240                          2027              
00002240                          2028               * PRINT COMMA
00002240  43F9 0000338E           2029              LEA     MSG_COMMA,A1
00002246  103C 000E               2030              MOVE.B  #14,D0
0000224A  4E4F                    2031              TRAP    #15
0000224C                          2032              
0000224C                          2033              * PRINT ADDRESS REGISTER
0000224C  760D                    2034              MOVE.L  #13,D3
0000224E  E94F                    2035              LSL.W   #4,D7
00002250  E66F                    2036              LSR.W   D3,D7   *get register bits 
00002252                          2037              
00002252  43F9 000033D8           2038              LEA     MSG_A,A1    *print An
00002258  103C 000E               2039              MOVE.B  #14,D0
0000225C  4E4F                    2040              TRAP    #15
0000225E                          2041   
0000225E  7410                    2042              MOVE.L  #16,D2
00002260  2207                    2043              MOVE.L  D7,D1       *print register number of An
00002262  103C 000F               2044              MOVE.B  #15,D0
00002266  4E4F                    2045              TRAP    #15
00002268                          2046  
00002268                          2047              
00002268                          2048  
00002268  244C                    2049              MOVEA.L A4,A2             *move A3 to A2 since absolute address may have been used
0000226A  548A                    2050              ADDA.L  #$2,A2          * Increase counter by long
0000226C                          2051              
0000226C                          2052  
0000226C  6000 EFCA               2053              BRA     INCREMENT       * Branch back up to main loop
00002270                          2054              
00002270                          2055  T_LEAS_EA
00002270  3E12                    2056              MOVE.W  (A2),D7
00002272  760A                    2057              MOVE.L  #10,D3
00002274  E76F                    2058              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00002276  760D                    2059              MOVE.L  #13,D3
00002278  E66F                    2060              LSR.W   D3,D7   *shift D7 to right 13 to get the register
0000227A                          2061  
0000227A  BE3C 0000               2062              CMP.B   #$0,D7          *mode is Dn
0000227E  6700 0F68               2063              BEQ     INVALID_EA            *ea valid
00002282  BE3C 0001               2064              CMP.B   #$1,D7          
00002286  6700 0F60               2065              BEQ     INVALID_EA
0000228A  BE3C 0002               2066              CMP.B   #$2,D7             *mode is (An)
0000228E  6700 0B7C               2067              BEQ     GOOD       *(An) 
00002292  BE3C 0003               2068              CMP.B   #$3,D7
00002296  6700 0F50               2069              BEQ     INVALID_EA      *(An)+
0000229A  BE3C 0004               2070              CMP.B   #$4,D7
0000229E  6700 0F48               2071              BEQ     INVALID_EA      *-(An)
000022A2  BE3C 0007               2072              CMP.B   #$7,D7
000022A6  6700 0006               2073              BEQ     T_LEAS_IMM_REG     *(xxx).W or (xxx).L or #<data>
000022AA  6000 0F3C               2074              BRA     INVALID_EA
000022AE                          2075  
000022AE                          2076  T_LEAS_IMM_REG 
000022AE  3E12                    2077              MOVE.W  (A2),D7
000022B0  760D                    2078              MOVE.L  #13,D3
000022B2  E76F                    2079              LSL.W   D3,D7
000022B4  E66F                    2080              LSR.W   D3,D7
000022B6  BE3C 0000               2081              CMP.B   #$0,D7
000022BA  6700 0B50               2082              BEQ     GOOD  *word absolute address
000022BE  BE3C 0001               2083              CMP.B   #$1,D7
000022C2  6700 0B48               2084              BEQ     GOOD  *long absolute address
000022C6  6000 0F20               2085              BRA     INVALID_EA  
000022CA                          2086  
000022CA                          2087  LEA_EAS
000022CA  3E12                    2088              MOVE.W  (A2),D7
000022CC  760A                    2089              MOVE.L  #10,D3
000022CE  E76F                    2090              LSL.W   D3,D7   *shift D7 to right 13 to get the register
000022D0  760D                    2091              MOVE.L  #13,D3
000022D2  E66F                    2092              LSR.W   D3,D7   *shift D7 to right 13 to get the register
000022D4                          2093  
000022D4  BE3C 0000               2094              CMP.B   #$0,D7          *mode is Dn
000022D8  6700 0F0E               2095              BEQ     INVALID_EA            *ea valid
000022DC  BE3C 0001               2096              CMP.B   #$1,D7          
000022E0  6700 0F06               2097              BEQ     INVALID_EA      *mode is An
000022E4  BE3C 0002               2098              CMP.B   #$2,D7             
000022E8  6700 0CCA               2099              BEQ     ADDY_R_SP       *(An)        
000022EC  BE3C 0003               2100              CMP.B   #$3,D7
000022F0  6700 0EF6               2101              BEQ     INVALID_EA      *(An)+
000022F4  BE3C 0004               2102              CMP.B   #$4,D7
000022F8  6700 0EEE               2103              BEQ     INVALID_EA      *-(An)
000022FC  BE3C 0007               2104              CMP.B   #$7,D7
00002300  6700 0006               2105              BEQ     LEAS_IMM_REG     *(xxx).W or (xxx).L or #<data>
00002304  6000 0EE2               2106              BRA     INVALID_EA
00002308                          2107  
00002308                          2108  
00002308                          2109  LEAS_IMM_REG 
00002308  3E12                    2110              MOVE.W  (A2),D7
0000230A  760D                    2111              MOVE.L  #13,D3
0000230C  E76F                    2112              LSL.W   D3,D7
0000230E  E66F                    2113              LSR.W   D3,D7
00002310  BE3C 0000               2114              CMP.B   #$0,D7
00002314  6700 0B86               2115              BEQ     W_ADDY  *word absolute address
00002318  BE3C 0001               2116              CMP.B   #$1,D7
0000231C  6700 0B9E               2117              BEQ     L_ADDY  *long absolute address
00002320  6000 0EC6               2118              BRA     INVALID_EA         
00002324                          2119  
00002324                          2120  
00002324                          2121  *-----------------------------------------------------------
00002324                          2122  * Test to see if we have a matching OR op code. If so
00002324                          2123  * print out the memory address and the op code.
00002324                          2124  *-----------------------------------------------------------
00002324                          2125  MATCH_OR
00002324  220A                    2126              MOVE.L  A2,D1
00002326  143C 0010               2127              MOVE.B  #16,D2
0000232A  103C 000F               2128              MOVE.B  #15,D0
0000232E  4E4F                    2129              TRAP    #15
00002330                          2130              
00002330  3E12                    2131              MOVE.W (A2),D7
00002332  E94F                    2132              LSL.W   #4,D7
00002334  760D                    2133              MOVE.L  #13,D3
00002336                          2134              
00002336                          2135              
00002336  43F9 000033C5           2136              LEA     MSG_OR,A1  
0000233C  103C 000E               2137              MOVE.B  #14,D0
00002340  4E4F                    2138              TRAP    #15
00002342  3E12                    2139              MOVE.W  (A2),D7
00002344                          2140              
00002344                          2141              *GET SIZE SUB
00002344  48E7 0120               2142              MOVEM.L A2/D7,-(SP)
00002348  4EB9 0000294A           2143              JSR     AND_SIZE_SUB    *and same bit pattern as or
0000234E  4CDF 0480               2144              MOVEM.L (SP)+,A2/D7
00002352                          2145              
00002352                          2146  
00002352  43F9 0000330B           2147              LEA     SPACE,A1  
00002358  103C 000E               2148              MOVE.B  #14,D0
0000235C  4E4F                    2149              TRAP    #15
0000235E                          2150              
0000235E                          2151              
0000235E                          2152              
0000235E                          2153               *TEST GET SOURCE SUB
0000235E  3E12                    2154              MOVE.W  (A2),D7
00002360  48E7 0120               2155              MOVEM.L A2/D7,-(SP)
00002364  4EB9 00002A06           2156              JSR     T_AND_PRINT_SRC_EA  *OR same bit pattern as AND
0000236A  4CDF 0480               2157              MOVEM.L (SP)+,A2/D7
0000236E                          2158              
0000236E  BC3C 0001               2159              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
00002372                          2160  
00002372  6700 0E7C               2161              BEQ     INVAL_EA_NO_RTS     
00002376                          2162              
00002376                          2163              
00002376                          2164              * TEST PRINT DEST MODE AND REGISTER
00002376  3E12                    2165              MOVE.W  (A2),D7
00002378  48E7 0120               2166              MOVEM.L A2/D7,-(SP)
0000237C  4EB9 00002A44           2167              JSR     T_AND_PRINT_DEST_EA     *OR same bit pattern as AND
00002382  4CDF 0480               2168              MOVEM.L (SP)+,A2/D7
00002386                          2169              
00002386  BC3C 0001               2170              CMP.B   #$1,D6              *if D6 has $1 that means that the test failed and now print INVALID EA    
0000238A                          2171  
0000238A  6700 0E64               2172              BEQ     INVAL_EA_NO_RTS
0000238E                          2173              
0000238E                          2174  
0000238E                          2175              *GET SOURCE SUB
0000238E  3E12                    2176              MOVE.W  (A2),D7
00002390  48E7 0120               2177              MOVEM.L A2/D7,-(SP)
00002394  4EB9 00002BCC           2178              JSR     AND_PRINT_SRC_EA        *OR same bit pattern as AND
0000239A  4CDF 0480               2179              MOVEM.L (SP)+,A2/D7
0000239E                          2180              
0000239E                          2181               * PRINT COMMA
0000239E  43F9 0000338E           2182              LEA     MSG_COMMA,A1
000023A4  103C 000E               2183              MOVE.B  #14,D0
000023A8  4E4F                    2184              TRAP    #15
000023AA                          2185              
000023AA                          2186              * PRINT DEST MODE AND REGISTER
000023AA  3E12                    2187              MOVE.W  (A2),D7
000023AC  48E7 0120               2188              MOVEM.L A2/D7,-(SP)
000023B0  4EB9 00002C04           2189              JSR     AND_PRINT_DEST_EA       *OR same bit pattern as AND
000023B6  4CDF 0480               2190              MOVEM.L (SP)+,A2/D7
000023BA                          2191  
000023BA                          2192              
000023BA  244C                    2193              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000023BC  548A                    2194              ADDA.L  #$2,A2          * Increase counter by long
000023BE  4287                    2195              CLR.L   D7
000023C0                          2196  
000023C0  6000 EE76               2197              BRA     INCREMENT       * Branch back up to main loop
000023C4                          2198  
000023C4                          2199  
000023C4                          2200  *-----------------------------------------------------------
000023C4                          2201  * Test to see if we have a matching Bcc op code. If so
000023C4                          2202  * print out the memory address and the op code.
000023C4                          2203  *6E = BGT, 6F = BLE, 67=BEQ
000023C4                          2204  *-----------------------------------------------------------
000023C4                          2205  MATCH_BCC
000023C4  3E12                    2206              MOVE.W  (A2),D7
000023C6  E05F                    2207              ROR.W   #$8,D7          * Rotate to get condition code. Rotate 2 bytes.
000023C8                          2208                                      
000023C8  BE3C 006E               2209              CMP.B   #$6E,D7
000023CC  6700 0016               2210              BEQ     MATCH_BGT
000023D0                          2211              
000023D0  BE3C 006F               2212              CMP.B   #$6F,D7
000023D4  6700 0082               2213              BEQ     MATCH_BLE
000023D8                          2214              
000023D8  BE3C 0067               2215              CMP.B   #$67,D7
000023DC  6700 00EE               2216              BEQ     MATCH_BEQ
000023E0                          2217              
000023E0  6000 EE1C               2218              BRA     NOOP           
000023E4                          2219  
000023E4                          2220  MATCH_BGT
000023E4  220A                    2221              MOVE.L  A2,D1
000023E6  143C 0010               2222              MOVE.B  #16,D2
000023EA  103C 000F               2223              MOVE.B  #15,D0
000023EE  4E4F                    2224              TRAP    #15
000023F0                          2225              
000023F0  43F9 0000333E           2226              LEA     MSG_BGT,A1
000023F6  103C 000E               2227              MOVE.B  #14,D0
000023FA  4E4F                    2228              TRAP    #15
000023FC                          2229              
000023FC  3E12                    2230              MOVE.W  (A2),D7
000023FE  BE3C 0000               2231              CMP.B   #$00,D7         * Compare to see if we have a word displacement or byte
00002402  6700 002A               2232              BEQ     EA_BGT_WORD
00002406                          2233              
00002406  43F9 0000330B           2234              LEA     SPACE,A1        * Byte displacement
0000240C  103C 000E               2235              MOVE.B  #14,D0
00002410  4E4F                    2236              TRAP    #15
00002412                          2237              
00002412  43F9 000033DE           2238              LEA     HEX_SIGN,A1     
00002418  4E4F                    2239              TRAP    #15
0000241A                          2240              
0000241A  4241                    2241              CLR     D1
0000241C  1207                    2242              MOVE.B  D7,D1
0000241E  143C 0010               2243              MOVE.B  #16,D2
00002422  103C 000F               2244              MOVE.B  #15,D0
00002426  4E4F                    2245              TRAP    #15
00002428                          2246              
00002428  548A                    2247              ADDA.L  #$2,A2
0000242A                          2248              
0000242A  6000 EE0C               2249              BRA     INCREMENT
0000242E                          2250              
0000242E                          2251  EA_BGT_WORD
0000242E  548A                    2252              ADDA.L  #$2,A2            
00002430  43F9 0000330B           2253              LEA     SPACE,A1        * Byte displacement
00002436  103C 000E               2254              MOVE.B  #14,D0
0000243A  4E4F                    2255              TRAP    #15
0000243C                          2256              
0000243C  43F9 000033DE           2257              LEA     HEX_SIGN,A1     * HEX SIGN HERE?
00002442  4E4F                    2258              TRAP    #15
00002444                          2259              
00002444  4241                    2260              CLR     D1
00002446  3212                    2261              MOVE.W  (A2),D1
00002448  143C 0010               2262              MOVE.B  #16,D2
0000244C  103C 000F               2263              MOVE.B  #15,D0
00002450  4E4F                    2264              TRAP    #15
00002452                          2265              
00002452  548A                    2266              ADDA.L  #$2,A2
00002454                          2267  
00002454  6000 EDE2               2268              BRA     INCREMENT
00002458                          2269  
00002458                          2270  MATCH_BLE
00002458  220A                    2271              MOVE.L  A2,D1
0000245A  143C 0010               2272              MOVE.B  #16,D2
0000245E  103C 000F               2273              MOVE.B  #15,D0
00002462  4E4F                    2274              TRAP    #15
00002464                          2275              
00002464  43F9 00003345           2276              LEA     MSG_BLE,A1
0000246A  103C 000E               2277              MOVE.B  #14,D0
0000246E  4E4F                    2278              TRAP    #15
00002470                          2279              
00002470  3E12                    2280              MOVE.W  (A2),D7
00002472  BE3C 0000               2281              CMP.B   #$00,D7         * Compare to see if we have a word displacement or byte
00002476  6700 002A               2282              BEQ     EA_BLE_WORD
0000247A                          2283              
0000247A  43F9 0000330B           2284              LEA     SPACE,A1        * Byte displacement
00002480  103C 000E               2285              MOVE.B  #14,D0
00002484  4E4F                    2286              TRAP    #15
00002486                          2287              
00002486  43F9 000033DE           2288              LEA     HEX_SIGN,A1     * HEX SIGN HERE?
0000248C  4E4F                    2289              TRAP    #15
0000248E                          2290              
0000248E  4241                    2291              CLR     D1
00002490  1207                    2292              MOVE.B  D7,D1
00002492  143C 0010               2293              MOVE.B  #16,D2
00002496  103C 000F               2294              MOVE.B  #15,D0
0000249A  4E4F                    2295              TRAP    #15
0000249C                          2296              
0000249C  548A                    2297              ADDA.L  #$2,A2
0000249E                          2298              
0000249E  6000 ED98               2299              BRA     INCREMENT
000024A2                          2300              
000024A2                          2301  EA_BLE_WORD
000024A2  548A                    2302              ADDA.L  #$2,A2            
000024A4  43F9 0000330B           2303              LEA     SPACE,A1        * Byte displacement
000024AA  103C 000E               2304              MOVE.B  #14,D0
000024AE  4E4F                    2305              TRAP    #15
000024B0                          2306              
000024B0  43F9 000033DE           2307              LEA     HEX_SIGN,A1     * HEX SIGN HERE?
000024B6  4E4F                    2308              TRAP    #15
000024B8                          2309              
000024B8  4241                    2310              CLR     D1
000024BA  3212                    2311              MOVE.W  (A2),D1
000024BC  143C 0010               2312              MOVE.B  #16,D2
000024C0  103C 000F               2313              MOVE.B  #15,D0
000024C4  4E4F                    2314              TRAP    #15
000024C6                          2315              
000024C6  548A                    2316              ADDA.L  #$2,A2
000024C8                          2317  
000024C8  6000 ED6E               2318              BRA     INCREMENT
000024CC                          2319  
000024CC                          2320  MATCH_BEQ
000024CC  220A                    2321              MOVE.L  A2,D1
000024CE  143C 0010               2322              MOVE.B  #16,D2
000024D2  103C 000F               2323              MOVE.B  #15,D0
000024D6  4E4F                    2324              TRAP    #15
000024D8                          2325              
000024D8  43F9 0000334C           2326              LEA     MSG_BEQ,A1
000024DE  103C 000E               2327              MOVE.B  #14,D0
000024E2  4E4F                    2328              TRAP    #15
000024E4                          2329                          
000024E4  3E12                    2330              MOVE.W  (A2),D7
000024E6  BE3C 0000               2331              CMP.B   #$00,D7         * Compare to see if we have a word displacement or byte
000024EA  6700 002A               2332              BEQ     EA_BEQ_WORD
000024EE                          2333              
000024EE  43F9 0000330B           2334              LEA     SPACE,A1        * Byte displacement
000024F4  103C 000E               2335              MOVE.B  #14,D0
000024F8  4E4F                    2336              TRAP    #15
000024FA                          2337              
000024FA  43F9 000033DE           2338              LEA     HEX_SIGN,A1     * HEX SIGN HERE?
00002500  4E4F                    2339              TRAP    #15
00002502                          2340              
00002502  4241                    2341              CLR     D1
00002504  1207                    2342              MOVE.B  D7,D1
00002506  143C 0010               2343              MOVE.B  #16,D2
0000250A  103C 000F               2344              MOVE.B  #15,D0
0000250E  4E4F                    2345              TRAP    #15
00002510                          2346              
00002510  548A                    2347              ADDA.L  #$2,A2
00002512                          2348              
00002512  6000 ED24               2349              BRA     INCREMENT
00002516                          2350              
00002516                          2351  EA_BEQ_WORD
00002516  548A                    2352              ADDA.L  #$2,A2            
00002518  43F9 0000330B           2353              LEA     SPACE,A1        * Byte displacement
0000251E  103C 000E               2354              MOVE.B  #14,D0
00002522  4E4F                    2355              TRAP    #15
00002524                          2356              
00002524  43F9 000033DE           2357              LEA     HEX_SIGN,A1     * HEX SIGN HERE?
0000252A  4E4F                    2358              TRAP    #15
0000252C                          2359              
0000252C  4241                    2360              CLR     D1
0000252E  3212                    2361              MOVE.W  (A2),D1
00002530  143C 0010               2362              MOVE.B  #16,D2
00002534  103C 000F               2363              MOVE.B  #15,D0
00002538  4E4F                    2364              TRAP    #15
0000253A                          2365              
0000253A  548A                    2366              ADDA.L  #$2,A2
0000253C                          2367  
0000253C  6000 ECFA               2368              BRA     INCREMENT
00002540                          2369  
00002540                          2370  
00002540                          2371  
00002540                          2372  *-----------------------------------------------------------
00002540                          2373  * Test to see if we have a matching MOVE op code. If so
00002540                          2374  * print out the memory address and the op code.
00002540                          2375  *-----------------------------------------------------------
00002540                          2376  MATCH_MOVE
00002540  3E12                    2377              MOVE.W  (A2),D7
00002542  EC0F                    2378              LSR.B   #6,D7       *shift value in D7 to the right by 6 bits
00002544  0C07 0001               2379              CMPI.B  #$1,D7     *check if opcode is $1 if so it is MOVEA
00002548  6700 00AC               2380              BEQ     MATCH_MOVEA
0000254C                          2381              
0000254C                          2382              
0000254C                          2383              
0000254C  3E12                    2384              MOVE.W  (A2),D7
0000254E  363C 000C               2385              MOVE.W #12,D3
00002552                          2386              
00002552  E66F                    2387              LSR.W   D3,D7
00002554  BE3C 0000               2388              CMP.B   #$00,D7
00002558  6700 ECA4               2389              BEQ     NOOP
0000255C                          2390              
0000255C  220A                    2391              MOVE.L  A2,D1
0000255E  143C 0010               2392              MOVE.B  #16,D2
00002562  103C 000F               2393              MOVE.B  #15,D0
00002566  4E4F                    2394              TRAP    #15
00002568  43F9 0000337A           2395              LEA     MSG_MOVE,A1
0000256E  103C 000E               2396              MOVE.B  #14,D0
00002572  4E4F                    2397              TRAP    #15
00002574                          2398              
00002574                          2399              * PRINT SIZE
00002574  3E12                    2400              MOVE.W  (A2),D7
00002576  48E7 0120               2401              MOVEM.L A2/D7,-(SP)
0000257A  4EB9 00002CE4           2402              JSR     MOVE_SIZE_SUB
00002580  4CDF 0480               2403              MOVEM.L (SP)+,A2/D7
00002584                          2404              
00002584  43F9 0000330F           2405              LEA     SM_SPACE,A1        * Byte displacement
0000258A  103C 000E               2406              MOVE.B  #14,D0
0000258E  4E4F                    2407              TRAP    #15
00002590                          2408              
00002590  4286                    2409              CLR.L   D6
00002592                          2410              *TEST MOVE SRC
00002592  3E12                    2411              MOVE.W  (A2),D7
00002594  48E7 0120               2412              MOVEM.L A2/D7,-(SP)
00002598  4EB9 00002D34           2413              JSR     T_PRINT_SRC_EA
0000259E  4CDF 0480               2414              MOVEM.L (SP)+,A2/D7
000025A2                          2415              
000025A2  BC3C 0001               2416              CMP.B   #$1,D6
000025A6  6700 0C48               2417              BEQ     INVAL_EA_NO_RTS
000025AA                          2418              
000025AA                          2419              *TEST MOVE DEST
000025AA  3E12                    2420              MOVE.W  (A2),D7
000025AC  48E7 0120               2421              MOVEM.L A2/D7,-(SP)
000025B0  4EB9 00002D6C           2422              JSR     T_MOVE_MODE_DEST
000025B6  4CDF 0480               2423              MOVEM.L (SP)+,A2/D7
000025BA                          2424              
000025BA  BC3C 0001               2425              CMP.B   #$1,D6
000025BE  6700 0C30               2426              BEQ     INVAL_EA_NO_RTS
000025C2                          2427              
000025C2                          2428              
000025C2                          2429              * PRINT SRC MODE AND REGISTER
000025C2  3E12                    2430              MOVE.W  (A2),D7
000025C4  48E7 0120               2431              MOVEM.L A2/D7,-(SP)
000025C8  4EB9 00002E0E           2432              JSR     PRINT_SRC_EA
000025CE  4CDF 0480               2433              MOVEM.L (SP)+,A2/D7
000025D2                          2434              
000025D2                          2435              * PRINT COMMA
000025D2  43F9 0000338E           2436              LEA     MSG_COMMA,A1
000025D8  103C 000E               2437              MOVE.B  #14,D0
000025DC  4E4F                    2438              TRAP    #15
000025DE                          2439              
000025DE                          2440              * PRINT DEST MODE AND REGISTER
000025DE  3E12                    2441              MOVE.W  (A2),D7
000025E0  48E7 0120               2442              MOVEM.L A2/D7,-(SP)
000025E4  4EB9 00002E46           2443              JSR     MOVE_MODE_DEST
000025EA  4CDF 0480               2444              MOVEM.L (SP)+,A2/D7
000025EE                          2445                 
000025EE  244C                    2446              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000025F0  548A                    2447              ADDA.L  #$2,A2          * Increase counter by long
000025F2                          2448              
000025F2                          2449  
000025F2  6000 EC44               2450              BRA     INCREMENT       * Branch back up to main loop
000025F6                          2451  
000025F6                          2452              
000025F6                          2453  MATCH_MOVEA
000025F6                          2454              
000025F6  3E12                    2455              MOVE.W  (A2),D7
000025F8  363C 000C               2456              MOVE.W #12,D3
000025FC                          2457              
000025FC  E66F                    2458              LSR.W   D3,D7
000025FE  BE3C 0000               2459              CMP.B   #$00,D7
00002602  6700 EBFA               2460              BEQ     NOOP
00002606  BE3C 0001               2461              CMP.B   #$1,D7
0000260A  6700 EBF2               2462              BEQ     NOOP
0000260E                          2463  
0000260E  220A                    2464              MOVE.L  A2,D1
00002610  143C 0010               2465              MOVE.B  #16,D2
00002614  103C 000F               2466              MOVE.B  #15,D0
00002618  4E4F                    2467              TRAP    #15
0000261A                          2468              
0000261A  43F9 00003390           2469              LEA     MSG_MOVEA,A1
00002620  103C 000E               2470              MOVE.B  #14,D0
00002624  4E4F                    2471              TRAP    #15
00002626                          2472              
00002626                          2473              * PRINT SIZE
00002626  3E12                    2474              MOVE.W  (A2),D7
00002628  48E7 0120               2475              MOVEM.L A2/D7,-(SP)
0000262C  4EB9 00002D04           2476              JSR     MOVEA_SIZE_SUB
00002632  4CDF 0480               2477              MOVEM.L (SP)+,A2/D7
00002636                          2478              
00002636  43F9 0000330B           2479              LEA     SPACE,A1        
0000263C  103C 000E               2480              MOVE.B  #14,D0
00002640  4E4F                    2481              TRAP    #15
00002642                          2482              
00002642                          2483              *TEST EA
00002642  3E12                    2484              MOVE.W  (A2),D7
00002644  48E7 0120               2485              MOVEM.L A2/D7,-(SP)
00002648  4EB8 1AEC               2486              JSR     T_ADDA_PRINT_SRC_EA    *test ea 
0000264C  4CDF 0480               2487              MOVEM.L (SP)+,A2/D7
00002650                          2488              
00002650                          2489  
00002650  BC3C 0001               2490              CMP.B   #$1,D6
00002654  6700 0B9A               2491              BEQ     INVAL_EA_NO_RTS
00002658                          2492              
00002658  3E12                    2493              MOVE.W  (A2),D7
0000265A  48E7 0120               2494              MOVEM.L A2/D7,-(SP)
0000265E  4EB8 1A6C               2495              JSR     ADDA_P_SRC_EA    *print ea 
00002662  4CDF 0480               2496              MOVEM.L (SP)+,A2/D7
00002666                          2497              
00002666                          2498              * PRINT COMMA
00002666  43F9 0000338E           2499              LEA     MSG_COMMA,A1
0000266C  103C 000E               2500              MOVE.B  #14,D0
00002670  4E4F                    2501              TRAP    #15
00002672                          2502                  
00002672  4287                    2503              CLR.L   D7
00002674  3E12                    2504              MOVE.W  (A2),D7
00002676                          2505              
00002676                          2506              * PRINT ADDRESS REGISTER
00002676  760D                    2507              MOVE.L  #13,D3
00002678  E94F                    2508              LSL.W   #4,D7
0000267A  E66F                    2509              LSR.W   D3,D7   *get register bits 
0000267C                          2510              
0000267C  43F9 000033D8           2511              LEA     MSG_A,A1    *print An
00002682  103C 000E               2512              MOVE.B  #14,D0
00002686  4E4F                    2513              TRAP    #15
00002688                          2514   
00002688  7410                    2515              MOVE.L  #16,D2
0000268A  2207                    2516              MOVE.L  D7,D1       *print register number of An
0000268C  103C 000F               2517              MOVE.B  #15,D0
00002690  4E4F                    2518              TRAP    #15
00002692                          2519  
00002692                          2520              
00002692                          2521              
00002692                          2522              
00002692  244C                    2523              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
00002694  548A                    2524              ADDA.L  #$2,A2          * Increase counter by long
00002696                          2525              
00002696                          2526  
00002696                          2527  
00002696  6000 EBA0               2528              BRA     INCREMENT       * Branch back up to main loop
0000269A                          2529  
0000269A                          2530              
0000269A                          2531  MATCH_MOVEM 
0000269A  3E12                    2532              MOVE.W  (A2),D7
0000269C  363C 000C               2533              MOVE.W #12,D3
000026A0                          2534              
000026A0  E66F                    2535              LSR.W   D3,D7
000026A2  BE3C 0000               2536              CMP.B   #$00,D7
000026A6  6700 EB56               2537              BEQ     NOOP
000026AA  BE3C 0001               2538              CMP.B   #$1,D7
000026AE  6700 EB4E               2539              BEQ     NOOP
000026B2                          2540  
000026B2  220A                    2541              MOVE.L  A2,D1
000026B4  143C 0010               2542              MOVE.B  #16,D2
000026B8  103C 000F               2543              MOVE.B  #15,D0
000026BC  4E4F                    2544              TRAP    #15
000026BE                          2545              
000026BE  43F9 00003368           2546              LEA     MSG_MOVEM,A1
000026C4  103C 000E               2547              MOVE.B  #14,D0
000026C8  4E4F                    2548              TRAP    #15
000026CA                          2549              
000026CA                          2550              
000026CA                          2551              * PRINT SIZE
000026CA  3E12                    2552              MOVE.W  (A2),D7
000026CC  48E7 0120               2553              MOVEM.L A2/D7,-(SP)
000026D0  4EB9 00002D1C           2554              JSR     MOVEM_SIZE_SUB
000026D6  4CDF 0480               2555              MOVEM.L (SP)+,A2/D7
000026DA                          2556              
000026DA  43F9 0000330B           2557              LEA     SPACE,A1
000026E0  103C 000E               2558              MOVE.B  #14,D0
000026E4  4E4F                    2559              TRAP    #15            
000026E6                          2560                          
000026E6  43F9 000033CB           2561              LEA     MSG_INV_EA,A1
000026EC  103C 000E               2562              MOVE.B  #14,D0
000026F0  4E4F                    2563              TRAP    #15
000026F2                          2564            
000026F2  244C                    2565              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000026F4  548A                    2566              ADDA.L  #$2,A2          * Increase counter by long
000026F6                          2567              
000026F6                          2568  
000026F6                          2569  
000026F6  6000 EB40               2570              BRA     INCREMENT       * Branch back up to main loop
000026FA                          2571  
000026FA                          2572  
000026FA                          2573  
000026FA                          2574  *===================SUBROUTINES========================
000026FA                          2575  
000026FA                          2576  
000026FA                          2577  EA_MEM_SHIFT_ROTATE
000026FA  3E12                    2578              MOVE.W  (A2),D7
000026FC  CE7C 0038               2579              AND.W   #$0038,D7     *get the three bits needed to determine the mode
00002700  BE7C 0010               2580              CMP.W   #$0010,D7     *see if (An) mode
00002704  6700 002E               2581              BEQ     EA_MEM_ADDREG
00002708  BE7C 0018               2582              CMP.W   #$0018,D7     *see if post increment mode
0000270C  6700 006A               2583              BEQ     EA_MEM_POST
00002710  BE7C 0020               2584              CMP.W   #$0020,D7     *see if pre decrement mode
00002714  6700 00AE               2585              BEQ     EA_MEM_PRE
00002718  BE7C 0038               2586              CMP.W   #$0038,D7     *See if absolute address mode
0000271C  6700 00F2               2587              BEQ     EA_MEM_ABS
00002720                          2588              
00002720  48E7 0120               2589              MOVEM.L A2/D7,-(SP)
00002724  4EB9 000031E8           2590              JSR     INVALID_EA
0000272A  4CDF 0480               2591              MOVEM.L (SP)+,A2/D7
0000272E                          2592              
0000272E  244C                    2593              MOVEA.L A4,A2
00002730                          2594  
00002730  6000 EB06               2595              BRA     INCREMENT
00002734                          2596              
00002734                          2597     
00002734                          2598  
00002734                          2599  EA_MEM_ADDREG
00002734  3E12                    2600              MOVE.W  (A2),D7
00002736  CE7C 0007               2601              AND.W   #$0007,D7
0000273A                          2602              
0000273A  43F9 0000330B           2603              LEA     SPACE,A1
00002740  103C 000E               2604              MOVE.B  #14,D0
00002744  4E4F                    2605              TRAP    #15
00002746                          2606              
00002746  43F9 000033DA           2607              LEA     L_PAREN,A1
0000274C  4E4F                    2608              TRAP    #15
0000274E                          2609              
0000274E  43F9 000033D8           2610              LEA     MSG_A,A1
00002754  4E4F                    2611              TRAP    #15
00002756                          2612              
00002756  4241                    2613              CLR     D1
00002758  1207                    2614              MOVE.B  D7,D1
0000275A  143C 000A               2615              MOVE.B  #10,D2
0000275E  103C 000F               2616              MOVE.B  #15,D0
00002762  4E4F                    2617              TRAP    #15  
00002764                          2618              
00002764  43F9 000033DC           2619              LEA     R_PAREN,A1
0000276A  103C 000E               2620              MOVE.B  #14,D0
0000276E  4E4F                    2621              TRAP    #15
00002770                          2622              
00002770  284A                    2623              MOVEA.L A2,A4
00002772  548C                    2624              ADDA.L  #$2,A4
00002774                          2625  
00002774                          2626              
00002774  6000 0A8C               2627              BRA EXIT
00002778                          2628  
00002778                          2629  EA_MEM_POST
00002778  3E12                    2630              MOVE.W  (A2),D7
0000277A  CE7C 0007               2631              AND.W   #$0007,D7
0000277E                          2632              
0000277E  43F9 0000330B           2633              LEA     SPACE,A1
00002784  103C 000E               2634              MOVE.B  #14,D0
00002788  4E4F                    2635              TRAP    #15
0000278A                          2636              
0000278A  43F9 000033DA           2637              LEA     L_PAREN,A1
00002790  4E4F                    2638              TRAP    #15
00002792                          2639              
00002792  43F9 000033D8           2640              LEA     MSG_A,A1
00002798  4E4F                    2641              TRAP    #15
0000279A                          2642              
0000279A  4241                    2643              CLR     D1
0000279C  1207                    2644              MOVE.B  D7,D1
0000279E  143C 000A               2645              MOVE.B  #10,D2
000027A2  103C 000F               2646              MOVE.B  #15,D0
000027A6  4E4F                    2647              TRAP    #15  
000027A8                          2648              
000027A8  43F9 000033DC           2649              LEA     R_PAREN,A1
000027AE  103C 000E               2650              MOVE.B  #14,D0
000027B2  4E4F                    2651              TRAP    #15
000027B4                          2652              
000027B4  43F9 000033E2           2653              LEA     PLUS,A1
000027BA  4E4F                    2654              TRAP    #15
000027BC                          2655              
000027BC  284A                    2656              MOVEA.L A2,A4
000027BE  548C                    2657              ADDA.L  #$2,A4
000027C0                          2658  
000027C0                          2659  
000027C0                          2660               
000027C0  6000 0A40               2661              BRA EXIT
000027C4                          2662              
000027C4                          2663  EA_MEM_PRE
000027C4  3E12                    2664              MOVE.W  (A2),D7
000027C6  CE7C 0007               2665              AND.W   #$0007,D7
000027CA                          2666              
000027CA  43F9 0000330B           2667              LEA     SPACE,A1
000027D0  103C 000E               2668              MOVE.B  #14,D0
000027D4  4E4F                    2669              TRAP    #15
000027D6                          2670              
000027D6  43F9 000033E4           2671              LEA     MINUS,A1
000027DC  4E4F                    2672              TRAP    #15
000027DE                          2673              
000027DE  43F9 000033DA           2674              LEA     L_PAREN,A1
000027E4  4E4F                    2675              TRAP    #15
000027E6                          2676              
000027E6  43F9 000033D8           2677              LEA     MSG_A,A1
000027EC  4E4F                    2678              TRAP    #15
000027EE                          2679              
000027EE  4241                    2680              CLR     D1
000027F0  1207                    2681              MOVE.B  D7,D1
000027F2  143C 000A               2682              MOVE.B  #10,D2
000027F6  103C 000F               2683              MOVE.B  #15,D0
000027FA  4E4F                    2684              TRAP    #15  
000027FC                          2685              
000027FC  43F9 000033DC           2686              LEA     R_PAREN,A1
00002802  103C 000E               2687              MOVE.B  #14,D0
00002806  4E4F                    2688              TRAP    #15
00002808                          2689              
00002808  284A                    2690              MOVEA.L A2,A4
0000280A  548C                    2691              ADDA.L  #$2,A4
0000280C                          2692  
0000280C                          2693  
0000280C  6000 09F4               2694              BRA EXIT
00002810                          2695              
00002810                          2696  
00002810                          2697  EA_MEM_ABS
00002810  3E12                    2698              MOVE.W  (A2),D7
00002812  0807 0000               2699              BTST.L  #$00,D7         *See if word or long addressing
00002816  6600 002E               2700              BNE     EA_MEM_ABS_LONG
0000281A  284A                    2701              MOVEA.L A2,A4
0000281C                          2702              
0000281C  548C                    2703              ADDA.L  #$2,A4          *grab the word
0000281E                          2704              
0000281E  43F9 0000330B           2705              LEA     SPACE,A1
00002824  103C 000E               2706              MOVE.B  #14,D0
00002828  4E4F                    2707              TRAP    #15
0000282A                          2708              
0000282A  43F9 000033DE           2709              LEA     HEX_SIGN,A1
00002830  4E4F                    2710              TRAP    #15
00002832                          2711              
00002832  4241                    2712              CLR     D1
00002834  3214                    2713              MOVE.W  (A4),D1
00002836  143C 0010               2714              MOVE.B  #16,D2
0000283A  103C 000F               2715              MOVE.B  #15,D0
0000283E  4E4F                    2716              TRAP    #15
00002840                          2717              
00002840  548C                    2718              ADDA.L  #2,A4           *increase counter
00002842                          2719              
00002842  6000 09BE               2720              BRA EXIT
00002846                          2721              
00002846                          2722  EA_MEM_ABS_LONG
00002846                          2723              
00002846                          2724              
00002846  284A                    2725              MOVEA.L A2,A4
00002848                          2726              
00002848  548C                    2727              ADDA.L  #$2,A4          *grab the first word
0000284A                          2728              
0000284A  43F9 0000330B           2729              LEA     SPACE,A1
00002850  103C 000E               2730              MOVE.B  #14,D0
00002854  4E4F                    2731              TRAP    #15
00002856                          2732              
00002856  43F9 000033DE           2733              LEA     HEX_SIGN,A1
0000285C  4E4F                    2734              TRAP    #15
0000285E                          2735              
0000285E  4241                    2736              CLR     D1
00002860  3214                    2737              MOVE.W  (A4),D1
00002862  143C 0010               2738              MOVE.B  #16,D2
00002866  103C 000F               2739              MOVE.B  #15,D0
0000286A  4E4F                    2740              TRAP    #15
0000286C                          2741              
0000286C  548C                    2742              ADDA.L  #2,A4           *grab the second word
0000286E                          2743              
0000286E  4241                    2744              CLR     D1
00002870  3214                    2745              MOVE.W  (A4),D1
00002872  143C 0010               2746              MOVE.B  #16,D2
00002876  103C 000F               2747              MOVE.B  #15,D0
0000287A  4E4F                    2748              TRAP    #15
0000287C                          2749              
0000287C  548C                    2750              ADDA.L  #2,A4           *increase counter
0000287E                          2751  
0000287E  6000 0982               2752              BRA EXIT
00002882                          2753              
00002882                          2754              
00002882                          2755  EA_SHIFT_ROTATE
00002882                          2756              *Getting EAs
00002882  3E12                    2757              MOVE.W  (A2),D7       *Find if immediate data or register shift
00002884  0807 0005               2758              BTST.L  #$05,D7
00002888  6600 006A               2759              BNE     REG_SHIFT     *Shifting by a register (1)
0000288C                          2760              
0000288C                          2761              
0000288C                          2762              *IMMEDIATE DATA SHIFT (all 0s in count register = shift count of 8)
0000288C                          2763              
0000288C  43F9 0000330B           2764              LEA     SPACE,A1      
00002892  103C 000E               2765              MOVE.B  #14,D0
00002896  4E4F                    2766              TRAP    #15
00002898                          2767              
00002898  43F9 000033E0           2768              LEA     HASH_SIGN,A1
0000289E  4E4F                    2769              TRAP    #15
000028A0                          2770  
000028A0  43F9 000033DE           2771              LEA     HEX_SIGN,A1
000028A6  4E4F                    2772              TRAP    #15
000028A8                          2773  
000028A8  CE7C 0E00               2774              AND.W   #$0E00,D7     *Get shift count
000028AC  BE7C 0000               2775              CMP.W   #$0000,D7     *edge case of shifting by 8
000028B0  6700 0024               2776              BEQ     SHIFT_EIGHT
000028B4  E04F                    2777              LSR.W   #8,D7         *Prepare to print out shift count
000028B6  E24F                    2778              LSR.W   #1,D7
000028B8                          2779              
000028B8  4241                    2780              CLR     D1
000028BA  1207                    2781              MOVE.B  D7,D1
000028BC  103C 000F               2782              MOVE.B  #15,D0
000028C0  143C 000A               2783              MOVE.B  #10,D2
000028C4  4E4F                    2784              TRAP    #15
000028C6                          2785  
000028C6  43F9 0000338E           2786              LEA     MSG_COMMA,A1
000028CC  103C 000E               2787              MOVE.B  #14,D0
000028D0  4E4F                    2788              TRAP    #15
000028D2  6000 0056               2789              BRA     SHIFT_DEST
000028D6                          2790                 
000028D6                          2791  SHIFT_EIGHT
000028D6  123C 0008               2792              MOVE.B  #8,D1
000028DA  103C 000F               2793              MOVE.B  #15,D0
000028DE  143C 000A               2794              MOVE.B  #10,D2
000028E2  4E4F                    2795              TRAP    #15
000028E4                          2796              
000028E4  43F9 0000338E           2797              LEA     MSG_COMMA,A1
000028EA  103C 000E               2798              MOVE.B  #14,D0
000028EE  4E4F                    2799              TRAP    #15
000028F0  6000 0038               2800              BRA     SHIFT_DEST 
000028F4                          2801              
000028F4                          2802  REG_SHIFT
000028F4  43F9 0000330B           2803              LEA     SPACE,A1      
000028FA  103C 000E               2804              MOVE.B  #14,D0
000028FE  4E4F                    2805              TRAP    #15
00002900                          2806              
00002900  43F9 000033D6           2807              LEA     MSG_D,A1
00002906  4E4F                    2808              TRAP    #15
00002908  CE7C 0E00               2809              AND.W   #$0E00,D7
0000290C  E04F                    2810              LSR.W   #8,D7         *Prepare to print out register number
0000290E  E24F                    2811              LSR.W   #1,D7
00002910                          2812              
00002910  4241                    2813              CLR     D1
00002912  1207                    2814              MOVE.B  D7,D1
00002914  103C 000F               2815              MOVE.B  #15,D0
00002918  143C 000A               2816              MOVE.B  #10,D2
0000291C  4E4F                    2817              TRAP    #15
0000291E                          2818  
0000291E  43F9 0000338E           2819              LEA     MSG_COMMA,A1
00002924  103C 000E               2820              MOVE.B  #14,D0
00002928  4E4F                    2821              TRAP    #15
0000292A                          2822            
0000292A                          2823              
0000292A                          2824  SHIFT_DEST
0000292A  3E12                    2825              MOVE.W  (A2),D7
0000292C  CE7C 0007               2826              AND.W   #$0007,D7
00002930                          2827              
00002930  43F9 000033D6           2828              LEA     MSG_D,A1
00002936  4E4F                    2829              TRAP    #15
00002938                          2830              
00002938  4241                    2831              CLR     D1
0000293A  1207                    2832              MOVE.B  D7,D1
0000293C  103C 000F               2833              MOVE.B  #15,D0
00002940  143C 000A               2834              MOVE.B  #10,D2
00002944  4E4F                    2835              TRAP    #15
00002946  6000 08BA               2836              BRA     EXIT
0000294A                          2837              
0000294A                          2838              
0000294A                          2839              
0000294A                          2840  
0000294A                          2841  AND_SIZE_SUB   *print the size of and
0000294A  3E12                    2842              MOVE.W  (A2),D7
0000294C  EF4F                    2843              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
0000294E  363C 000D               2844              MOVE.W  #13,D3
00002952  E66F                    2845              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002954  BE3C 0000               2846              CMP.B   #$0,D7
00002958  6700 085E               2847              BEQ     BYTE
0000295C  BE3C 0001               2848              CMP.B   #$1,D7
00002960  6700 0866               2849              BEQ     WORD
00002964  BE3C 0002               2850              CMP.B   #$2,D7
00002968  6700 086E               2851              BEQ     LONG
0000296C  BE3C 0004               2852              CMP.B   #$4,D7
00002970  6700 0846               2853              BEQ     BYTE
00002974  BE3C 0005               2854              CMP.B   #$5,D7
00002978  6700 084E               2855              BEQ     WORD
0000297C  BE3C 0006               2856              CMP.B   #$6,D7
00002980  6700 0856               2857              BEQ     LONG
00002984  6000 087C               2858              BRA     EXIT
00002988                          2859              *ELSE BRANCH TO INVALID EA
00002988                          2860  
00002988                          2861  T_SOURCE_AND_EA  
00002988  3E12                    2862              MOVE.W  (A2),D7
0000298A  760A                    2863              MOVE.L  #10,D3
0000298C  E76F                    2864              LSL.W   D3,D7   *shift D7 to right 13 to get the register
0000298E  760D                    2865              MOVE.L  #13,D3
00002990  E66F                    2866              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002992                          2867  
00002992  BE3C 0000               2868              CMP.B   #$0,D7          *mode is Dn
00002996  6700 0474               2869              BEQ     GOOD
0000299A  BE3C 0001               2870              CMP.B   #$1,D7          
0000299E  6700 0848               2871              BEQ     INVALID_EA
000029A2  BE3C 0002               2872              CMP.B   #$2,D7             *mode is (An)
000029A6  6700 0464               2873              BEQ     GOOD       *(An) 
000029AA  BE3C 0003               2874              CMP.B   #$3,D7
000029AE  6700 045C               2875              BEQ     GOOD      *(An)+
000029B2  BE3C 0004               2876              CMP.B   #$4,D7
000029B6  6700 0454               2877              BEQ     GOOD      *-(An)
000029BA  BE3C 0007               2878              CMP.B   #$7,D7
000029BE  6700 00C0               2879              BEQ     T_AND_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
000029C2  6000 0824               2880              BRA     INVALID_EA
000029C6                          2881  
000029C6                          2882  T_DEST_AND_EA  
000029C6  4287                    2883              CLR.L   D7
000029C8  3E12                    2884              MOVE.W  (A2),D7
000029CA  760A                    2885              MOVE.L  #10,D3
000029CC  E76F                    2886              LSL.W   D3,D7   *shift D7 to right 10 to get the mode
000029CE  760D                    2887              MOVE.L  #13,D3
000029D0  E66F                    2888              LSR.W   D3,D7   *shift D7 to right 13 to get the mode
000029D2                          2889  
000029D2  BE3C 0000               2890              CMP.B   #$0,D7          *mode is Dn
000029D6  6700 0434               2891              BEQ     GOOD 
000029DA  BE3C 0001               2892              CMP.B   #$1,D7          
000029DE  6700 0808               2893              BEQ     INVALID_EA
000029E2  BE3C 0002               2894              CMP.B   #$2,D7             *mode is (An)
000029E6  6700 0424               2895              BEQ     GOOD      *(An) 
000029EA  BE3C 0003               2896              CMP.B   #$3,D7
000029EE  6700 041C               2897              BEQ     GOOD      *(An)+
000029F2  BE3C 0004               2898              CMP.B   #$4,D7
000029F6  6700 0414               2899              BEQ     GOOD      *-(An)
000029FA  BE3C 0007               2900              CMP.B   #$7,D7
000029FE  6700 010C               2901              BEQ     T_AND_IMM_REG_D      *(xxx).W or (xxx).L
00002A02  6000 07E4               2902              BRA     INVALID_EA
00002A06                          2903              
00002A06                          2904  T_AND_PRINT_SRC_EA
00002A06  4287                    2905              CLR.L   D7
00002A08  3E12                    2906              MOVE.W  (A2),D7
00002A0A  EF4F                    2907              LSL.W   #7,D7   *get rid of first 6 bits of and opcode
00002A0C  760D                    2908              MOVE.L  #13,D3
00002A0E  E66F                    2909              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002A10                          2910              
00002A10  BE3C 0000               2911              CMP.B   #$0,D7
00002A14  6700 FF72               2912              BEQ     T_SOURCE_AND_EA  *DEST ea is DN
00002A18  BE3C 0001               2913              CMP.B   #$1,D7
00002A1C  6700 FF6A               2914              BEQ     T_SOURCE_AND_EA  *DEST ea is DN
00002A20  BE3C 0002               2915              CMP.B   #$2,D7
00002A24  6700 FF62               2916              BEQ     T_SOURCE_AND_EA  *DEST ea is DN
00002A28  BE3C 0004               2917              CMP.B   #$4,D7
00002A2C  6700 03DE               2918              BEQ     GOOD   *SOURCE ea is DN
00002A30  BE3C 0005               2919              CMP.B   #$5,D7
00002A34  6700 03D6               2920              BEQ     GOOD   *SOURCE ea is DN
00002A38  BE3C 0006               2921              CMP.B   #$6,D7
00002A3C  6700 03CE               2922              BEQ     GOOD  *SOURCE ea is DN
00002A40  6000 07A6               2923              BRA     INVALID_EA
00002A44                          2924              
00002A44                          2925              
00002A44                          2926  
00002A44                          2927  T_AND_PRINT_DEST_EA
00002A44  3E12                    2928              MOVE.W  (A2),D7
00002A46  EF4F                    2929              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00002A48  760D                    2930              MOVE.L  #13,D3
00002A4A  E66F                    2931              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002A4C                          2932              
00002A4C  BE3C 0000               2933              CMP.B   #$0,D7
00002A50  6700 03BA               2934              BEQ     GOOD  *DEST ea is DN
00002A54  BE3C 0001               2935              CMP.B   #$1,D7
00002A58  6700 03B2               2936              BEQ     GOOD  *DEST ea is DN
00002A5C  BE3C 0002               2937              CMP.B   #$2,D7
00002A60  6700 03AA               2938              BEQ     GOOD  *DEST ea is DN
00002A64  BE3C 0004               2939              CMP.B   #$4,D7
00002A68  6700 FF5C               2940              BEQ     T_DEST_AND_EA   *source ea is DN
00002A6C  BE3C 0005               2941              CMP.B   #$5,D7
00002A70  6700 FF54               2942              BEQ     T_DEST_AND_EA   *source ea is DN
00002A74  BE3C 0006               2943              CMP.B   #$6,D7
00002A78  6700 FF4C               2944              BEQ     T_DEST_AND_EA   *source ea is DN
00002A7C  6000 076A               2945              BRA     INVALID_EA
00002A80                          2946  
00002A80                          2947  T_AND_IMM_REG_S *EA is source for and opcode
00002A80  3E12                    2948              MOVE.W  (A2),D7
00002A82  760D                    2949              MOVE.L  #13,D3
00002A84  E76F                    2950              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00002A86  E66F                    2951              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002A88                          2952              
00002A88  BE3C 0000               2953              CMP.B   #$0,D7
00002A8C  6700 037E               2954              BEQ     GOOD  *word absolute address
00002A90  BE3C 0001               2955              CMP.B   #$1,D7
00002A94  6700 0376               2956              BEQ     GOOD  *long absolute address
00002A98  BE3C 0004               2957              CMP.B   #$4,D7
00002A9C  6700 0006               2958              BEQ     T_AND_IMM_DATA_S 
00002AA0                          2959              
00002AA0  6000 0746               2960              BRA     INVALID_EA
00002AA4                          2961              
00002AA4                          2962  T_AND_IMM_DATA_S
00002AA4                          2963              
00002AA4  3E14                    2964              MOVE.W  (A4),D7
00002AA6  EF4F                    2965              LSL.W   #7,D7
00002AA8  760D                    2966              MOVE.L  #13,D3
00002AAA                          2967              
00002AAA  E66F                    2968              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00002AAC  BE3C 0000               2969              CMP.B   #$0,D7
00002AB0  6700 035A               2970              BEQ     GOOD
00002AB4  BE3C 0001               2971              CMP.B   #$1,D7
00002AB8  6700 0352               2972              BEQ     GOOD
00002ABC  BE3C 0002               2973              CMP.B   #$2,D7
00002AC0  6700 034A               2974              BEQ     GOOD
00002AC4  BE3C 0004               2975              CMP.B   #$4,D7
00002AC8  6700 0342               2976              BEQ     GOOD
00002ACC  BE3C 0005               2977              CMP.B   #$5,D7
00002AD0  6700 033A               2978              BEQ     GOOD
00002AD4  BE3C 0006               2979              CMP.B   #$6,D7
00002AD8  6700 0332               2980              BEQ     GOOD
00002ADC                          2981              *if neither then it is an error
00002ADC  6000 070A               2982              BRA     INVALID_EA
00002AE0                          2983  
00002AE0                          2984  T_AND_ADDY_R_SNP    *An but cannot be byte for opcode size of and
00002AE0  3E14                    2985              MOVE.W  (A4),D7
00002AE2  EF4F                    2986              LSL.W   #7,D7
00002AE4                          2987              
00002AE4  760D                    2988              MOVE.L  #13,D3
00002AE6  E66F                    2989              LSR.W   D3,D7
00002AE8  BE3C 0001               2990              CMP.B   #$1,D7
00002AEC  6700 031E               2991              BEQ     GOOD 
00002AF0  BE3C 0002               2992              CMP.B   #$2,D7
00002AF4  6700 0316               2993              BEQ     GOOD
00002AF8  BE3C 0005               2994              CMP.B   #$5,D7
00002AFC  6700 030E               2995              BEQ     GOOD
00002B00  BE3C 0006               2996              CMP.B   #$6,D7
00002B04  6700 0306               2997              BEQ     GOOD
00002B08                          2998              *INVALID EA
00002B08  6000 06DE               2999              BRA     INVALID_EA
00002B0C                          3000  
00002B0C                          3001              
00002B0C                          3002  T_AND_IMM_REG_D *EA is destination for and opcode
00002B0C  3E12                    3003              MOVE.W  (A2),D7
00002B0E  760D                    3004              MOVE.L  #13,D3
00002B10  E76F                    3005              LSL.W   D3,D7   *shift D7 to left 13 to get the register
00002B12  E66F                    3006              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002B14                          3007              
00002B14  BE3C 0000               3008              CMP.B   #$0,D7
00002B18  6700 02F2               3009              BEQ     GOOD  *word absolute address
00002B1C  BE3C 0001               3010              CMP.B   #$1,D7
00002B20  6700 02EA               3011              BEQ     GOOD  *long absolute address
00002B24  6000 06C2               3012              BRA     INVALID_EA
00002B28                          3013  
00002B28                          3014  
00002B28                          3015  SOURCE_AND_EA  
00002B28  3E12                    3016              MOVE.W  (A2),D7
00002B2A  760A                    3017              MOVE.L  #10,D3
00002B2C  E76F                    3018              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00002B2E  760D                    3019              MOVE.L  #13,D3
00002B30  E66F                    3020              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002B32                          3021  
00002B32  BE3C 0000               3022              CMP.B   #$0,D7          *mode is Dn
00002B36  6700 006E               3023              BEQ     F_AND_DN 
00002B3A  BE3C 0001               3024              CMP.B   #$1,D7          mode is An NOT ALLOWED
00002B3E  6700 06A8               3025              BEQ     INVALID_EA
00002B42  BE3C 0002               3026              CMP.B   #$2,D7             *mode is (An)
00002B46  6700 046C               3027              BEQ     ADDY_R_SP       *(An) 
00002B4A  BE3C 0003               3028              CMP.B   #$3,D7
00002B4E  6700 04DE               3029              BEQ     ADDY_R_SPI      *(An)+
00002B52  BE3C 0004               3030              CMP.B   #$4,D7
00002B56  6700 0568               3031              BEQ     ADDY_R_SPD      *-(An)
00002B5A  BE3C 0007               3032              CMP.B   #$7,D7
00002B5E  6700 00DA               3033              BEQ     AND_IMM_REG_S      *(xxx).W or (xxx).L or #<data>
00002B62  6000 0684               3034              BRA     INVALID_EA
00002B66                          3035  
00002B66                          3036  DEST_AND_EA  
00002B66  4287                    3037              CLR.L   D7
00002B68  3E12                    3038              MOVE.W  (A2),D7
00002B6A  760A                    3039              MOVE.L  #10,D3
00002B6C  E76F                    3040              LSL.W   D3,D7   *shift D7 to right 10 to get the mode
00002B6E  760D                    3041              MOVE.L  #13,D3
00002B70  E66F                    3042              LSR.W   D3,D7   *shift D7 to right 13 to get the mode
00002B72                          3043  
00002B72  BE3C 0000               3044              CMP.B   #$0,D7          *mode is Dn
00002B76  6700 002E               3045              BEQ     F_AND_DN 
00002B7A  BE3C 0001               3046              CMP.B   #$1,D7          
00002B7E  6700 0668               3047              BEQ     INVALID_EA
00002B82  BE3C 0002               3048              CMP.B   #$2,D7             *mode is (An)
00002B86  6700 042C               3049              BEQ     ADDY_R_SP       *(An) 
00002B8A  BE3C 0003               3050              CMP.B   #$3,D7
00002B8E  6700 049E               3051              BEQ     ADDY_R_SPI      *(An)+
00002B92  BE3C 0004               3052              CMP.B   #$4,D7
00002B96  6700 0528               3053              BEQ     ADDY_R_SPD      *-(An)
00002B9A  BE3C 0007               3054              CMP.B   #$7,D7
00002B9E  6700 0128               3055              BEQ     AND_IMM_REG_D      *(xxx).W or (xxx).L
00002BA2  6000 0644               3056              BRA     INVALID_EA
00002BA6                          3057  
00002BA6                          3058  F_AND_DN
00002BA6  4287                    3059              CLR.L   D7
00002BA8  3E12                    3060              MOVE.W  (A2),D7
00002BAA  E94F                    3061              LSL.W   #4,D7   *get rid of first 6 bits of sub opcode
00002BAC  760D                    3062              MOVE.L  #13,D3
00002BAE  E66F                    3063              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002BB0  43F9 000033D6           3064              LEA     MSG_D,A1
00002BB6  103C 000E               3065              MOVE.B  #14,D0
00002BBA  4E4F                    3066              TRAP    #15
00002BBC  4281                    3067              CLR.L   D1
00002BBE  7410                    3068              MOVE.L  #16,D2
00002BC0  3207                    3069              MOVE.W  D7,D1
00002BC2  103C 000F               3070              MOVE.B  #15,D0
00002BC6  4E4F                    3071              TRAP    #15
00002BC8  6000 0638               3072              BRA EXIT      
00002BCC                          3073              
00002BCC                          3074              
00002BCC                          3075  AND_PRINT_SRC_EA
00002BCC  4287                    3076              CLR.L   D7
00002BCE  3E12                    3077              MOVE.W  (A2),D7
00002BD0  EF4F                    3078              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00002BD2  760D                    3079              MOVE.L  #13,D3
00002BD4  E66F                    3080              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002BD6                          3081              
00002BD6  BE3C 0000               3082              CMP.B   #$0,D7
00002BDA  6700 FF4C               3083              BEQ     SOURCE_AND_EA  *DEST ea is DN
00002BDE  BE3C 0001               3084              CMP.B   #$1,D7
00002BE2  6700 FF44               3085              BEQ     SOURCE_AND_EA  *DEST ea is DN
00002BE6  BE3C 0002               3086              CMP.B   #$2,D7
00002BEA  6700 FF3C               3087              BEQ     SOURCE_AND_EA  *DEST ea is DN
00002BEE  BE3C 0004               3088              CMP.B   #$4,D7
00002BF2  67B2                    3089              BEQ     F_AND_DN   *SOURCE ea is DN
00002BF4  BE3C 0005               3090              CMP.B   #$5,D7
00002BF8  67AC                    3091              BEQ     F_AND_DN   *SOURCE ea is DN
00002BFA  BE3C 0006               3092              CMP.B   #$6,D7
00002BFE  67A6                    3093              BEQ     F_AND_DN   *SOURCE ea is DN
00002C00  6000 05E6               3094              BRA     INVALID_EA
00002C04                          3095  
00002C04                          3096  AND_PRINT_DEST_EA
00002C04  3E12                    3097              MOVE.W  (A2),D7
00002C06  EF4F                    3098              LSL.W   #7,D7   *get rid of first 6 bits of sub opcode
00002C08  760D                    3099              MOVE.L  #13,D3
00002C0A  E66F                    3100              LSR.W   D3,D7   *shift D7 to right 13 to get the opmode
00002C0C                          3101              
00002C0C  BE3C 0000               3102              CMP.B   #$0,D7
00002C10  6794                    3103              BEQ     F_AND_DN  *DEST ea is DN
00002C12  BE3C 0001               3104              CMP.B   #$1,D7
00002C16  678E                    3105              BEQ     F_AND_DN  *DEST ea is DN
00002C18  BE3C 0002               3106              CMP.B   #$2,D7
00002C1C  6788                    3107              BEQ     F_AND_DN  *DEST ea is DN
00002C1E  BE3C 0004               3108              CMP.B   #$4,D7
00002C22  6700 FF42               3109              BEQ     DEST_AND_EA   *source ea is DN
00002C26  BE3C 0005               3110              CMP.B   #$5,D7
00002C2A  6700 FF3A               3111              BEQ     DEST_AND_EA   *source ea is DN
00002C2E  BE3C 0006               3112              CMP.B   #$6,D7
00002C32  6700 FF32               3113              BEQ     DEST_AND_EA   *source ea is DN
00002C36  6000 05B0               3114              BRA     INVALID_EA
00002C3A                          3115              
00002C3A                          3116  
00002C3A                          3117  AND_IMM_REG_S *EA is source for and opcode
00002C3A  3E12                    3118              MOVE.W  (A2),D7
00002C3C  760D                    3119              MOVE.L  #13,D3
00002C3E  E76F                    3120              LSL.W   D3,D7   *shift D7 to right 13 to get the register
00002C40  E66F                    3121              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002C42                          3122              
00002C42  BE3C 0000               3123              CMP.B   #$0,D7
00002C46  6700 0254               3124              BEQ     W_ADDY  *word absolute address
00002C4A  BE3C 0001               3125              CMP.B   #$1,D7
00002C4E  6700 026C               3126              BEQ     L_ADDY  *long absolute address
00002C52  BE3C 0004               3127              CMP.B   #$4,D7
00002C56  6700 0006               3128              BEQ     AND_IMM_DATA_S 
00002C5A                          3129              
00002C5A  6000 058C               3130              BRA     INVALID_EA
00002C5E                          3131              
00002C5E                          3132  AND_IMM_DATA_S
00002C5E                          3133              
00002C5E  3E14                    3134              MOVE.W  (A4),D7
00002C60  EF4F                    3135              LSL.W   #7,D7
00002C62  760D                    3136              MOVE.L  #13,D3
00002C64                          3137              
00002C64  548C                    3138              ADDA.L  #$2,A4      *increment A4 by a word 
00002C66  E66F                    3139              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00002C68  BE3C 0000               3140              CMP.B   #$0,D7
00002C6C  6700 02BA               3141              BEQ     IMM_DATA_SW
00002C70  BE3C 0001               3142              CMP.B   #$1,D7
00002C74  6700 02B2               3143              BEQ     IMM_DATA_SW
00002C78  BE3C 0002               3144              CMP.B   #$2,D7
00002C7C  6700 0284               3145              BEQ     IMM_DATA_SL
00002C80  BE3C 0004               3146              CMP.B   #$4,D7
00002C84  6700 02A2               3147              BEQ     IMM_DATA_SW
00002C88  BE3C 0005               3148              CMP.B   #$5,D7
00002C8C  6700 029A               3149              BEQ     IMM_DATA_SW
00002C90  BE3C 0006               3150              CMP.B   #$6,D7
00002C94  6700 026C               3151              BEQ     IMM_DATA_SL
00002C98                          3152              *if neither then it is an error
00002C98  6000 054E               3153              BRA     INVALID_EA
00002C9C                          3154  
00002C9C                          3155  AND_ADDY_R_SNP    *An but cannot be byte for opcode size of and
00002C9C  3E14                    3156              MOVE.W  (A4),D7
00002C9E  EF4F                    3157              LSL.W   #7,D7
00002CA0                          3158              
00002CA0  760D                    3159              MOVE.L  #13,D3
00002CA2  E66F                    3160              LSR.W   D3,D7
00002CA4  BE3C 0001               3161              CMP.B   #$1,D7
00002CA8  6700 02C2               3162              BEQ     ADDY_R_SNP 
00002CAC  BE3C 0002               3163              CMP.B   #$2,D7
00002CB0  6700 02BA               3164              BEQ     ADDY_R_SNP
00002CB4  BE3C 0005               3165              CMP.B   #$5,D7
00002CB8  6700 02B2               3166              BEQ     ADDY_R_SNP 
00002CBC  BE3C 0006               3167              CMP.B   #$6,D7
00002CC0  6700 02AA               3168              BEQ     ADDY_R_SNP
00002CC4                          3169              *INVALID EA
00002CC4  6000 0522               3170              BRA     INVALID_EA
00002CC8                          3171  
00002CC8                          3172              
00002CC8                          3173  AND_IMM_REG_D *EA is destination for and opcode
00002CC8  3E12                    3174              MOVE.W  (A2),D7
00002CCA  760D                    3175              MOVE.L  #13,D3
00002CCC  E76F                    3176              LSL.W   D3,D7   *shift D7 to left 13 to get the register
00002CCE  E66F                    3177              LSR.W   D3,D7   *shift D7 to right 13 to get the register
00002CD0                          3178              
00002CD0  BE3C 0000               3179              CMP.B   #$0,D7
00002CD4  6700 01C6               3180              BEQ     W_ADDY  *word absolute address
00002CD8  BE3C 0001               3181              CMP.B   #$1,D7
00002CDC  6700 01DE               3182              BEQ     L_ADDY  *long absolute address
00002CE0  6000 0506               3183              BRA     INVALID_EA
00002CE4                          3184   
00002CE4                          3185  
00002CE4                          3186  
00002CE4                          3187  
00002CE4                          3188              
00002CE4                          3189              
00002CE4                          3190  
00002CE4                          3191  MOVE_SIZE_SUB                           * MOVE SIZE SUBROUTINE START
00002CE4                          3192              * SHIFT TO SIZE FIELD
00002CE4  760C                    3193              MOVE.L  #12,D3
00002CE6  E66F                    3194              LSR.W   D3,D7
00002CE8                          3195              * RUN COMPARISONS
00002CE8  BE3C 0001               3196              CMP.B   #$1,D7
00002CEC  6700 04CA               3197              BEQ     BYTE
00002CF0  BE3C 0002               3198              CMP.B   #$2,D7
00002CF4  6700 04E2               3199              BEQ     LONG
00002CF8  BE3C 0003               3200              CMP.B   #$3,D7
00002CFC  6700 04CA               3201              BEQ     WORD
00002D00  6000 0500               3202              BRA     EXIT
00002D04                          3203              
00002D04                          3204  MOVEA_SIZE_SUB                           * MOVE SIZE SUBROUTINE START
00002D04                          3205              * SHIFT TO SIZE FIELD
00002D04  760C                    3206              MOVE.L  #12,D3
00002D06  E66F                    3207              LSR.W   D3,D7
00002D08                          3208              * RUN COMPARISONS
00002D08  BE3C 0002               3209              CMP.B   #$2,D7
00002D0C  6700 04CA               3210              BEQ     LONG
00002D10  BE3C 0003               3211              CMP.B   #$3,D7
00002D14  6700 04B2               3212              BEQ     WORD
00002D18  6000 04E8               3213              BRA     EXIT
00002D1C                          3214              
00002D1C                          3215  MOVEM_SIZE_SUB                           * MOVE SIZE SUBROUTINE START
00002D1C                          3216              * SHIFT TO SIZE FIELD
00002D1C                          3217              *MOVE.L  #12,D3
00002D1C  E30F                    3218              LSL.B   #1,D7
00002D1E  EE0F                    3219              LSR.B   #7,D7
00002D20                          3220              * RUN COMPARISONS
00002D20  BE3C 0000               3221              CMP.B   #$0,D7
00002D24  6700 04A2               3222              BEQ     WORD
00002D28  BE3C 0001               3223              CMP.B   #$1,D7
00002D2C  6700 04AA               3224              BEQ     LONG
00002D30  6000 04D0               3225              BRA     EXIT
00002D34                          3226  
00002D34                          3227              
00002D34                          3228              
00002D34                          3229              
00002D34                          3230             
00002D34                          3231  
00002D34                          3232  
00002D34                          3233  T_PRINT_SRC_EA                           * MOVE MODE SRC SUBROUTINE START
00002D34  E50F                    3234              LSL.B   #2,D7   *get rid of destination mode bits
00002D36  EA0F                    3235              LSR.B   #5,D7   *move source mode bits to first 3 bits of D7 
00002D38  BE3C 0000               3236              CMP.B   #$0,D7
00002D3C  6700 00CE               3237              BEQ     GOOD      
00002D40  BE3C 0001               3238              CMP.B   #$1,D7
00002D44  6700 00C6               3239              BEQ     GOOD            *An
00002D48  BE3C 0002               3240              CMP.B   #$2,D7
00002D4C  6700 00BE               3241              BEQ     GOOD             *(An)
00002D50  BE3C 0003               3242              CMP.B   #$3,D7
00002D54  6700 00B6               3243              BEQ     GOOD      *(An)+
00002D58  BE3C 0004               3244              CMP.B   #$4,D7
00002D5C  6700 00AE               3245              BEQ     GOOD      *-(An)
00002D60  BE3C 0007               3246              CMP.B   #$7,D7
00002D64  6700 0040               3247              BEQ     T_IMM_REG_S
00002D68  6000 047E               3248              BRA     INVALID_EA 
00002D6C                          3249   
00002D6C                          3250  T_MOVE_MODE_DEST                      * MOVE MODE DEST SUBROUTINE START
00002D6C  EC4F                    3251              LSR.W   #6,D7
00002D6E  EB0F                    3252              LSL.B   #5,D7 
00002D70  EA0F                    3253              LSR.B   #5,D7           *dest mode now in first 3 bits of D7
00002D72  BE3C 0000               3254              CMP.B   #$0,D7          *mode is Dn
00002D76  6700 0094               3255              BEQ     GOOD
00002D7A  BE3C 0001               3256              CMP.B  #$1,D7          mode is An NOT ALLOWED
00002D7E  6700 0468               3257              BEQ     INVALID_EA
00002D82  BE3C 0002               3258              CMP.B   #$2,D7             *mode is (An)
00002D86  6700 0084               3259              BEQ     GOOD       *(An) 
00002D8A  BE3C 0003               3260              CMP.B   #$3,D7
00002D8E  6700 007C               3261              BEQ     GOOD      *(An)+
00002D92  BE3C 0004               3262              CMP.B   #$4,D7
00002D96  6700 0074               3263              BEQ     GOOD      *-(An)
00002D9A  BE3C 0007               3264              CMP.B   #$7,D7
00002D9E  6700 004C               3265              BEQ     T_IMM_REG_D      *(xxx).W or (xxx).L or #<data>
00002DA2                          3266  
00002DA2  6000 0444               3267              BRA     INVALID_EA  
00002DA6                          3268  
00002DA6                          3269  T_IMM_REG_S     *SOURCE immediate data or address
00002DA6  4287                    3270              CLR.L     D7
00002DA8  3E12                    3271              MOVE.W  (A2),D7         *get A2 data back to D7
00002DAA  EB0F                    3272              LSL.B   #5,D7   *get rid of destination mode bits and source mode bits
00002DAC  EA0F                    3273              LSR.B   #5,D7   *move source register bits to first 3 bits of D7 
00002DAE  BE3C 0000               3274              CMP.B   #$0,D7
00002DB2  6700 0058               3275              BEQ     GOOD  *word absolute address
00002DB6  BE3C 0001               3276              CMP.B   #$1,D7
00002DBA  6700 0050               3277              BEQ     GOOD  *long absolute address
00002DBE  BE3C 0004               3278              CMP.B   #$4,D7
00002DC2  6700 0006               3279              BEQ     T_IMM_DATA_S
00002DC6  6000 0420               3280              BRA     INVALID_EA  
00002DCA                          3281  
00002DCA                          3282  T_IMM_DATA_S  *SOURCE IMMEDIATE DATA
00002DCA                          3283              *gotta go back to get the size and then get that amt of data
00002DCA                          3284              *by incrementing a A2 by a word and then getting the next byte word or long
00002DCA                          3285              *depending on the size of the move instruction
00002DCA                          3286              
00002DCA  3E14                    3287              MOVE.W  (A4),D7
00002DCC  760C                    3288              MOVE.L  #12,D3
00002DCE  E66F                    3289              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00002DD0  BE3C 0001               3290              CMP.B   #$1,D7
00002DD4  6700 0036               3291              BEQ     GOOD
00002DD8  BE3C 0002               3292              CMP.B   #$2,D7
00002DDC  6700 002E               3293              BEQ     GOOD
00002DE0  BE3C 0003               3294              CMP.B   #$3,D7
00002DE4  6700 0026               3295              BEQ     GOOD
00002DE8                          3296              *if neither then it is an error
00002DE8  6000 03FE               3297              BRA     INVALID_EA
00002DEC                          3298  
00002DEC                          3299  T_IMM_REG_D        *DESTINATION immediate data or address
00002DEC  3E12                    3300              MOVE.W  (A2),D7         *get A2 data back to D7
00002DEE  E94F                    3301              LSL.W   #4,D7   *get rid of size and opcode bits 
00002DF0  4243                    3302              CLR     D3
00002DF2  163C 000D               3303              MOVE.B  #13,D3
00002DF6                          3304              
00002DF6  E66F                    3305              LSR.W   D3,D7   *move destination register bits to first 3 bits of D7 
00002DF8  BE3C 0000               3306              CMP.B   #$0,D7
00002DFC  6700 000E               3307              BEQ     GOOD  *
00002E00  BE3C 0001               3308              CMP.B   #$1,D7
00002E04  6700 0006               3309              BEQ     GOOD
00002E08                          3310              
00002E08  6000 03DE               3311              BRA     INVALID_EA
00002E0C                          3312  
00002E0C  4E75                    3313  GOOD        RTS
00002E0E                          3314              
00002E0E                          3315       
00002E0E                          3316  PRINT_SRC_EA                           * MOVE MODE SRC SUBROUTINE START
00002E0E  E50F                    3317              LSL.B   #2,D7   *get rid of destination mode bits
00002E10  EA0F                    3318              LSR.B   #5,D7   *move source mode bits to first 3 bits of D7 
00002E12  BE3C 0000               3319              CMP.B   #$0,D7
00002E16  6700 033A               3320              BEQ     DATA_R_S 
00002E1A  BE3C 0001               3321              CMP.B   #$1,D7
00002E1E  6700 014C               3322              BEQ     ADDY_R_SNP      *An
00002E22  BE3C 0002               3323              CMP.B   #$2,D7
00002E26  6700 018C               3324              BEQ     ADDY_R_SP       *(An)
00002E2A  BE3C 0003               3325              CMP.B   #$3,D7
00002E2E  6700 01FE               3326              BEQ     ADDY_R_SPI      *(An)+
00002E32  BE3C 0004               3327              CMP.B   #$4,D7
00002E36  6700 0288               3328              BEQ     ADDY_R_SPD      *-(An)
00002E3A  BE3C 0007               3329              CMP.B   #$7,D7
00002E3E  6700 0038               3330              BEQ     IMM_REG_S
00002E42  6000 03A4               3331              BRA     INVALID_EA  
00002E46                          3332     
00002E46                          3333  MOVE_MODE_DEST                      * MOVE MODE DEST SUBROUTINE START
00002E46  EC4F                    3334              LSR.W   #6,D7
00002E48                          3335              
00002E48  EB0F                    3336              LSL.B   #5,D7 
00002E4A  EA0F                    3337              LSR.B   #5,D7           *dest mode now in first 3 bits of D7
00002E4C  BE3C 0000               3338              CMP.B   #$0,D7          *mode is Dn
00002E50  6700 0324               3339              BEQ     DATA_R_D
00002E54                          3340              *CMP.B  #$1,D7          mode is An NOT ALLOWED
00002E54  BE3C 0002               3341              CMP.B   #$2,D7             *mode is (An)
00002E58  6700 0196               3342              BEQ     ADDY_R_DP       *(An) 
00002E5C  BE3C 0003               3343              CMP.B   #$3,D7
00002E60  6700 0214               3344              BEQ     ADDY_R_DPI      *(An)+
00002E64  BE3C 0004               3345              CMP.B   #$4,D7
00002E68  6700 029E               3346              BEQ     ADDY_R_DPD      *-(An)
00002E6C  BE3C 0007               3347              CMP.B   #$7,D7
00002E70  6700 00DA               3348              BEQ     IMM_REG_D      *(xxx).W or (xxx).L or #<data>
00002E74                          3349  
00002E74  6000 0372               3350              BRA     INVALID_EA    
00002E78                          3351  
00002E78                          3352  IMM_REG_S     *SOURCE immediate data or address
00002E78  4287                    3353              CLR.L     D7
00002E7A  3E12                    3354              MOVE.W  (A2),D7         *get A2 data back to D7
00002E7C  EB0F                    3355              LSL.B   #5,D7   *get rid of destination mode bits and source mode bits
00002E7E  EA0F                    3356              LSR.B   #5,D7   *move source register bits to first 3 bits of D7 
00002E80  BE3C 0000               3357              CMP.B   #$0,D7
00002E84  6700 0016               3358              BEQ     W_ADDY  *word absolute address
00002E88  BE3C 0001               3359              CMP.B   #$1,D7
00002E8C  6700 002E               3360              BEQ     L_ADDY  *long absolute address
00002E90  BE3C 0004               3361              CMP.B   #$4,D7
00002E94  6700 0048               3362              BEQ     IMM_DATA_S
00002E98  6000 034E               3363              BRA     INVALID_EA  
00002E9C                          3364  
00002E9C                          3365  W_ADDY      
00002E9C  43F9 000033DE           3366              LEA     HEX_SIGN,A1
00002EA2  103C 000E               3367              MOVE.B  #14,D0
00002EA6  4E4F                    3368              TRAP    #15
00002EA8                          3369              
00002EA8  3E1C                    3370              MOVE.W  (A4)+,D7    *increment A2 by a word, to get word of absolute data in A4
00002EAA  4287                    3371              CLR.L   D7          *get rid of opcode
00002EAC  3E14                    3372              MOVE.W  (A4),D7     *put next word into D7
00002EAE                          3373              
00002EAE  7410                    3374              MOVE.L  #16,D2
00002EB0  2207                    3375              MOVE.L  D7,D1
00002EB2  103C 000F               3376              MOVE.B  #15,D0
00002EB6  4E4F                    3377              TRAP    #15
00002EB8                          3378              
00002EB8  6000 0348               3379              BRA EXIT     
00002EBC                          3380              
00002EBC                          3381  L_ADDY
00002EBC  43F9 000033DE           3382              LEA     HEX_SIGN,A1
00002EC2  103C 000E               3383              MOVE.B  #14,D0
00002EC6  4E4F                    3384              TRAP    #15
00002EC8  3E1C                    3385              MOVE.W  (A4)+,D7    *increment A2 by a word
00002ECA  4287                    3386              CLR.L   D7
00002ECC  2E14                    3387              MOVE.L  (A4),D7     *put next word into D7
00002ECE  548C                    3388              ADDA.L  #$2,A4      *increment a word and then when we call INCREMENT routine
00002ED0                          3389                                  *(to be removed) it will increment another word to get the 
00002ED0                          3390                                  *address of the next opcode
00002ED0  7410                    3391              MOVE.L  #16,D2
00002ED2  2207                    3392              MOVE.L  D7,D1
00002ED4  103C 000F               3393              MOVE.B  #15,D0
00002ED8  4E4F                    3394              TRAP    #15
00002EDA                          3395              
00002EDA  6000 0326               3396              BRA EXIT
00002EDE                          3397  
00002EDE                          3398  IMM_DATA_S  *SOURCE IMMEDIATE DATA
00002EDE                          3399              *gotta go back to get the size and then get that amt of data
00002EDE                          3400              *by incrementing a A2 by a word and then getting the next byte word or long
00002EDE                          3401              *depending on the size of the move instruction
00002EDE                          3402              
00002EDE  3E14                    3403              MOVE.W  (A4),D7
00002EE0  760C                    3404              MOVE.L  #12,D3
00002EE2  548C                    3405              ADDA.L  #$2,A4      *increment A4 by a word 
00002EE4  E66F                    3406              LSR.W   D3,D7       * SHIFT TO SIZE FIELD
00002EE6  BE3C 0001               3407              CMP.B   #$1,D7
00002EEA  6700 003C               3408              BEQ     IMM_DATA_SW
00002EEE  BE3C 0002               3409              CMP.B   #$2,D7
00002EF2  6700 000E               3410              BEQ     IMM_DATA_SL
00002EF6  BE3C 0003               3411              CMP.B   #$3,D7
00002EFA  6700 002C               3412              BEQ     IMM_DATA_SW
00002EFE                          3413              *if neither then it is an error
00002EFE  6000 02E8               3414              BRA     INVALID_EA
00002F02                          3415  
00002F02                          3416  
00002F02                          3417  IMM_DATA_SL *long of immediate data
00002F02  4281                    3418              CLR.L   D1
00002F04  43F9 000033E0           3419              LEA     HASH_SIGN,A1
00002F0A  103C 000E               3420              MOVE.B  #14,D0
00002F0E  4E4F                    3421              TRAP    #15
00002F10                          3422              
00002F10  43F9 000033DE           3423              LEA     HEX_SIGN,A1
00002F16  4E4F                    3424              TRAP    #15
00002F18                          3425  
00002F18  2214                    3426              MOVE.L  (A4),D1    *move immediate data from A4 to D1
00002F1A  548C                    3427              ADDA.L  #$2,A4      *increment A4 by a word (will be incremented by another word in opcode method
00002F1C  7410                    3428              MOVE.L  #16,D2
00002F1E  103C 000F               3429              MOVE.B  #15,D0
00002F22  4E4F                    3430              TRAP    #15         *print immediate data
00002F24  6000 02DC               3431              BRA     EXIT 
00002F28                          3432              
00002F28                          3433  IMM_DATA_SW *word of immediate data
00002F28  4281                    3434              CLR.L   D1
00002F2A  43F9 000033E0           3435              LEA     HASH_SIGN,A1
00002F30  103C 000E               3436              MOVE.B  #14,D0
00002F34  4E4F                    3437              TRAP    #15
00002F36                          3438              
00002F36  43F9 000033DE           3439              LEA     HEX_SIGN,A1
00002F3C  4E4F                    3440              TRAP    #15
00002F3E  3214                    3441              MOVE.W  (A4),D1    *move immediate data from A4 to D1
00002F40  7410                    3442              MOVE.L  #16,D2
00002F42  103C 000F               3443              MOVE.B  #15,D0
00002F46  4E4F                    3444              TRAP    #15
00002F48  6000 02B8               3445              BRA     EXIT 
00002F4C                          3446              
00002F4C                          3447  IMM_REG_D        *DESTINATION immediate data or address
00002F4C  3E12                    3448              MOVE.W  (A2),D7         *get A2 data back to D7
00002F4E  E94F                    3449              LSL.W   #4,D7   *get rid of size and opcode bits 
00002F50  4243                    3450              CLR     D3
00002F52  163C 000D               3451              MOVE.B  #13,D3
00002F56                          3452              
00002F56  E66F                    3453              LSR.W   D3,D7   *move destination register bits to first 3 bits of D7 
00002F58  BE3C 0000               3454              CMP.B   #$0,D7
00002F5C  6700 FF3E               3455              BEQ     W_ADDY  *
00002F60  BE3C 0001               3456              CMP.B   #$1,D7
00002F64  6700 FF56               3457              BEQ     L_ADDY
00002F68                          3458              
00002F68  6000 027E               3459              BRA     INVALID_EA
00002F6C                          3460  
00002F6C                          3461  
00002F6C                          3462  ADDY_R_SNP   *SOURCE An
00002F6C                          3463              
00002F6C  43F9 000033D8           3464              LEA     MSG_A,A1
00002F72  103C 000E               3465              MOVE.B  #14,D0
00002F76  4E4F                    3466              TRAP    #15
00002F78                          3467              
00002F78  4287                    3468              CLR.L   D7
00002F7A  3E12                    3469              MOVE.W  (A2),D7
00002F7C                          3470              
00002F7C  760D                    3471              MOVE.L  #13,D3 *prepare to move D7 by 13 bits to get source
00002F7E                          3472              
00002F7E                          3473              * GET SOURCE REGISTER #
00002F7E  E76F                    3474              LSL.W  D3,D7
00002F80  E66F                    3475              LSR.W  D3,D7
00002F82                          3476              
00002F82  7410                    3477              MOVE.L  #16,D2
00002F84  2207                    3478              MOVE.L  D7,D1
00002F86  103C 000F               3479              MOVE.B  #15,D0
00002F8A  4E4F                    3480              TRAP    #15
00002F8C                          3481              
00002F8C  6000 0274               3482              BRA EXIT    
00002F90                          3483  ADDY_R_DNP  *An register in bits 11,10,12 of  D7
00002F90  43F9 000033D8           3484              LEA     MSG_A,A1
00002F96  103C 000E               3485              MOVE.B  #14,D0
00002F9A  4E4F                    3486              TRAP    #15
00002F9C                          3487              
00002F9C  4287                    3488              CLR.L   D7
00002F9E  3E12                    3489              MOVE.W  (A2),D7
00002FA0  E94F                    3490              LSL.W   #4,D7
00002FA2                          3491              
00002FA2  760D                    3492              MOVE.L  #13,D3 *prepare to move D7 by 13 bits to get source
00002FA4                          3493              
00002FA4                          3494              * GET SOURCE REGISTER #
00002FA4  E66F                    3495              LSR.W  D3,D7
00002FA6                          3496              
00002FA6  7410                    3497              MOVE.L  #16,D2
00002FA8  2207                    3498              MOVE.L  D7,D1
00002FAA  103C 000F               3499              MOVE.B  #15,D0
00002FAE  4E4F                    3500              TRAP    #15
00002FB0                          3501              
00002FB0  6000 0250               3502              BRA EXIT    
00002FB4                          3503  
00002FB4                          3504  
00002FB4                          3505  
00002FB4                          3506  ADDY_R_SP   *SOURCE (An)
00002FB4  43F9 000033DA           3507              LEA     L_PAREN,A1
00002FBA  103C 000E               3508              MOVE.B  #14,D0
00002FBE  4E4F                    3509              TRAP    #15
00002FC0                          3510              
00002FC0  43F9 000033D8           3511              LEA     MSG_A,A1
00002FC6  103C 000E               3512              MOVE.B  #14,D0
00002FCA  4E4F                    3513              TRAP    #15
00002FCC                          3514              
00002FCC  4287                    3515              CLR.L   D7
00002FCE  3E12                    3516              MOVE.W  (A2),D7
00002FD0                          3517              
00002FD0  760D                    3518              MOVE.L  #13,D3 *prepare to move D7 by 13 bits to get source
00002FD2                          3519              
00002FD2                          3520              * GET SOURCE REGISTER #
00002FD2  E76F                    3521              LSL.W  D3,D7
00002FD4  E66F                    3522              LSR.W  D3,D7
00002FD6                          3523              
00002FD6  7410                    3524              MOVE.L  #16,D2
00002FD8  2207                    3525              MOVE.L  D7,D1
00002FDA  103C 000F               3526              MOVE.B  #15,D0
00002FDE  4E4F                    3527              TRAP    #15
00002FE0                          3528              
00002FE0  43F9 000033DC           3529              LEA     R_PAREN,A1
00002FE6  103C 000E               3530              MOVE.B  #14,D0
00002FEA  4E4F                    3531              TRAP    #15
00002FEC  6000 0214               3532              BRA EXIT     
00002FF0                          3533              
00002FF0                          3534  ADDY_R_DP   *DESTINATION (An) 
00002FF0  43F9 000033DA           3535              LEA     L_PAREN,A1
00002FF6  103C 000E               3536              MOVE.B  #14,D0
00002FFA  4E4F                    3537              TRAP    #15
00002FFC                          3538  
00002FFC                          3539  
00002FFC  43F9 000033D8           3540              LEA     MSG_A,A1
00003002  103C 000E               3541              MOVE.B  #14,D0
00003006  4E4F                    3542              TRAP    #15
00003008                          3543              
00003008  4287                    3544              CLR.L   D7
0000300A  3E12                    3545              MOVE.W  (A2),D7
0000300C                          3546              
0000300C  7609                    3547              MOVE.L  #9,D3
0000300E                          3548              
0000300E                          3549              * GET DESTINATION REGISTER #
0000300E  E66F                    3550              LSR.W   D3,D7
00003010  EB0F                    3551              LSL.B   #5,D7
00003012  EA0F                    3552              LSR.B   #5,D7
00003014                          3553              
00003014  7410                    3554              MOVE.L  #16,D2
00003016  2207                    3555              MOVE.L  D7,D1
00003018  103C 000F               3556              MOVE.B  #15,D0
0000301C  4E4F                    3557              TRAP    #15
0000301E                          3558              
0000301E  43F9 000033DC           3559              LEA     R_PAREN,A1
00003024  103C 000E               3560              MOVE.B  #14,D0
00003028  4E4F                    3561              TRAP    #15
0000302A  6000 01D6               3562              BRA EXIT    
0000302E                          3563              
0000302E                          3564  ADDY_R_SPI  *SOURCE (An)+ 
0000302E  43F9 000033DA           3565              LEA     L_PAREN,A1
00003034  103C 000E               3566              MOVE.B  #14,D0
00003038  4E4F                    3567              TRAP    #15
0000303A                          3568              
0000303A  43F9 000033D8           3569              LEA     MSG_A,A1
00003040  103C 000E               3570              MOVE.B  #14,D0
00003044  4E4F                    3571              TRAP    #15
00003046                          3572              
00003046  4287                    3573              CLR.L   D7
00003048  3E12                    3574              MOVE.W  (A2),D7
0000304A                          3575              
0000304A  760D                    3576              MOVE.L  #13,D3 *prepare to move D7 by 13 bits to get source
0000304C                          3577              
0000304C                          3578              * GET SOURCE REGISTER #
0000304C  E76F                    3579              LSL.W  D3,D7
0000304E  E66F                    3580              LSR.W  D3,D7
00003050                          3581              
00003050  7410                    3582              MOVE.L  #16,D2
00003052  2207                    3583              MOVE.L  D7,D1
00003054  103C 000F               3584              MOVE.B  #15,D0
00003058  4E4F                    3585              TRAP    #15
0000305A                          3586              
0000305A  43F9 000033DC           3587              LEA     R_PAREN,A1
00003060  103C 000E               3588              MOVE.B  #14,D0
00003064  4E4F                    3589              TRAP    #15
00003066                          3590              
00003066  43F9 000033E2           3591              LEA     PLUS,A1
0000306C  103C 000E               3592              MOVE.B  #14,D0
00003070  4E4F                    3593              TRAP    #15
00003072  6000 018E               3594              BRA EXIT     
00003076                          3595              
00003076                          3596  ADDY_R_DPI  *DESTINATION (An)+
00003076  43F9 000033DA           3597              LEA     L_PAREN,A1
0000307C  103C 000E               3598              MOVE.B  #14,D0
00003080  4E4F                    3599              TRAP    #15
00003082                          3600  
00003082                          3601  
00003082  43F9 000033D8           3602              LEA     MSG_A,A1
00003088  103C 000E               3603              MOVE.B  #14,D0
0000308C  4E4F                    3604              TRAP    #15
0000308E                          3605              
0000308E  4287                    3606              CLR.L   D7
00003090  3E12                    3607              MOVE.W  (A2),D7
00003092                          3608              
00003092  7609                    3609              MOVE.L  #9,D3
00003094                          3610              
00003094                          3611              * GET DESTINATION REGISTER #
00003094  E66F                    3612              LSR.W   D3,D7
00003096  EB0F                    3613              LSL.B   #5,D7
00003098  EA0F                    3614              LSR.B   #5,D7
0000309A                          3615              
0000309A  7410                    3616              MOVE.L  #16,D2
0000309C  2207                    3617              MOVE.L  D7,D1
0000309E  103C 000F               3618              MOVE.B  #15,D0
000030A2  4E4F                    3619              TRAP    #15
000030A4                          3620              
000030A4  43F9 000033DC           3621              LEA     R_PAREN,A1
000030AA  103C 000E               3622              MOVE.B  #14,D0
000030AE  4E4F                    3623              TRAP    #15
000030B0                          3624              
000030B0  43F9 000033E2           3625              LEA     PLUS,A1
000030B6  103C 000E               3626              MOVE.B  #14,D0
000030BA  4E4F                    3627              TRAP    #15
000030BC  6000 0144               3628              BRA EXIT    
000030C0                          3629  
000030C0                          3630  ADDY_R_SPD  *SOURCE -(An)  
000030C0  43F9 000033E4           3631              LEA     MINUS,A1
000030C6  103C 000E               3632              MOVE.B  #14,D0
000030CA  4E4F                    3633              TRAP    #15
000030CC                          3634              
000030CC  43F9 000033DA           3635              LEA     L_PAREN,A1
000030D2  103C 000E               3636              MOVE.B  #14,D0
000030D6  4E4F                    3637              TRAP    #15
000030D8                          3638              
000030D8  43F9 000033D8           3639              LEA     MSG_A,A1
000030DE  103C 000E               3640              MOVE.B  #14,D0
000030E2  4E4F                    3641              TRAP    #15
000030E4                          3642              
000030E4  4287                    3643              CLR.L   D7
000030E6  3E12                    3644              MOVE.W  (A2),D7
000030E8                          3645              
000030E8  760D                    3646              MOVE.L  #13,D3 *prepare to move D7 by 13 bits to get source
000030EA                          3647              
000030EA                          3648              * GET SOURCE REGISTER #
000030EA  E76F                    3649              LSL.W  D3,D7
000030EC  E66F                    3650              LSR.W  D3,D7
000030EE                          3651              
000030EE  7410                    3652              MOVE.L  #16,D2
000030F0  2207                    3653              MOVE.L  D7,D1
000030F2  103C 000F               3654              MOVE.B  #15,D0
000030F6  4E4F                    3655              TRAP    #15
000030F8                          3656              
000030F8  43F9 000033DC           3657              LEA     R_PAREN,A1
000030FE  103C 000E               3658              MOVE.B  #14,D0
00003102  4E4F                    3659              TRAP    #15
00003104  6000 00FC               3660              BRA EXIT  
00003108                          3661           
00003108                          3662  ADDY_R_DPD  *DESTINATION -(An)
00003108  43F9 000033E4           3663              LEA     MINUS,A1
0000310E  103C 000E               3664              MOVE.B  #14,D0
00003112  4E4F                    3665              TRAP    #15
00003114                          3666              
00003114  43F9 000033DA           3667              LEA     L_PAREN,A1
0000311A  103C 000E               3668              MOVE.B  #14,D0
0000311E  4E4F                    3669              TRAP    #15
00003120                          3670  
00003120                          3671  
00003120  43F9 000033D8           3672              LEA     MSG_A,A1
00003126  103C 000E               3673              MOVE.B  #14,D0
0000312A  4E4F                    3674              TRAP    #15
0000312C                          3675              
0000312C  4287                    3676              CLR.L   D7
0000312E  3E12                    3677              MOVE.W  (A2),D7
00003130                          3678              
00003130  7609                    3679              MOVE.L  #9,D3
00003132                          3680              
00003132                          3681              * GET DESTINATION REGISTER #
00003132  E66F                    3682              LSR.W   D3,D7
00003134  EB0F                    3683              LSL.B   #5,D7
00003136  EA0F                    3684              LSR.B   #5,D7
00003138                          3685              
00003138  7410                    3686              MOVE.L  #16,D2
0000313A  2207                    3687              MOVE.L  D7,D1
0000313C  103C 000F               3688              MOVE.B  #15,D0
00003140  4E4F                    3689              TRAP    #15
00003142                          3690              
00003142  43F9 000033DC           3691              LEA     R_PAREN,A1
00003148  103C 000E               3692              MOVE.B  #14,D0
0000314C  4E4F                    3693              TRAP    #15
0000314E  6000 00B2               3694              BRA EXIT  
00003152                          3695    
00003152                          3696  DATA_R_S   *SOURCE Dn
00003152                          3697              * PRINT D
00003152  43F9 000033D6           3698              LEA     MSG_D,A1
00003158  103C 000E               3699              MOVE.B  #14,D0
0000315C  4E4F                    3700              TRAP    #15
0000315E                          3701              
0000315E  4287                    3702              CLR.L   D7
00003160  3E12                    3703              MOVE.W  (A2),D7
00003162                          3704              
00003162  760D                    3705              MOVE.L  #13,D3 *prepare to move D7 by 13 bits to get source register
00003164                          3706              
00003164                          3707              * GET SOURCE REGISTER #
00003164  E76F                    3708              LSL.W  D3,D7
00003166  E66F                    3709              LSR.W  D3,D7
00003168                          3710              
00003168                          3711  
00003168  7410                    3712              MOVE.L  #16,D2
0000316A  2207                    3713              MOVE.L  D7,D1
0000316C  103C 000F               3714              MOVE.B  #15,D0
00003170  4E4F                    3715              TRAP    #15
00003172  6000 008E               3716              BRA EXIT                    * MOVE MODE SRC SUBROUTINE END
00003176                          3717              
00003176                          3718              
00003176                          3719  
00003176                          3720  DATA_R_D    *DESTINATION Dn
00003176                          3721              * PRINT D
00003176  43F9 000033D6           3722              LEA     MSG_D,A1
0000317C  103C 000E               3723              MOVE.B  #14,D0
00003180  4E4F                    3724              TRAP    #15
00003182                          3725              
00003182  4287                    3726              CLR.L   D7
00003184  3E12                    3727              MOVE.W  (A2),D7
00003186                          3728              
00003186  7609                    3729              MOVE.L  #9,D3
00003188                          3730              
00003188                          3731              * GET REGISTER #
00003188  E66F                    3732              LSR.W   D3,D7
0000318A  EB0F                    3733              LSL.B   #5,D7
0000318C  EA0F                    3734              LSR.B   #5,D7
0000318E                          3735              
0000318E  7410                    3736              MOVE.L  #16,D2
00003190  2207                    3737              MOVE.L  D7,D1
00003192  103C 000F               3738              MOVE.B  #15,D0
00003196  4E4F                    3739              TRAP    #15
00003198  6000 0068               3740              BRA EXIT                    * MOVE MODE DEST SUBROUTINE END
0000319C                          3741        
0000319C                          3742              
0000319C                          3743  * Size matching for logical shifts, arithmetic shifts, and rotates (MEMORY)
0000319C                          3744  MATCH_SIZE_MEMLAR
0000319C  6000 002A               3745              BRA     WORD
000031A0                          3746              
000031A0                          3747  * Size matching for logical shifts, arithmetic shifts, and rotates (REGISTER)
000031A0                          3748  MATCH_SIZE_LAR
000031A0                          3749  
000031A0  BE7C 0000               3750              CMP.W   #$0000,D7
000031A4  6700 0012               3751              BEQ     BYTE
000031A8                          3752              
000031A8  BE7C 0040               3753              CMP.W   #$0040,D7
000031AC  6700 001A               3754              BEQ     WORD
000031B0                          3755              
000031B0  BE7C 0080               3756              CMP.W   #$0080,D7
000031B4  6700 0022               3757              BEQ     LONG
000031B8                          3758              
000031B8                          3759  BYTE
000031B8  43F9 00003382           3760              LEA     MSG_BYTE,A1
000031BE  103C 000E               3761              MOVE.B  #14,D0
000031C2  4E4F                    3762              TRAP    #15
000031C4  6000 003C               3763              BRA     EXIT
000031C8                          3764  
000031C8                          3765  WORD
000031C8  43F9 00003386           3766              LEA     MSG_WORD,A1
000031CE  103C 000E               3767              MOVE.B  #14,D0
000031D2  4E4F                    3768              TRAP    #15
000031D4  6000 002C               3769              BRA     EXIT
000031D8                          3770  
000031D8                          3771  LONG
000031D8  43F9 0000338A           3772              LEA     MSG_LONG,A1
000031DE  103C 000E               3773              MOVE.B  #14,D0
000031E2  4E4F                    3774              TRAP    #15
000031E4  6000 001C               3775              BRA     EXIT
000031E8                          3776              
000031E8                          3777              
000031E8                          3778  INVALID_EA
000031E8  1C3C 0001               3779              MOVE.B  #$1,D6
000031EC                          3780              
000031EC                          3781            
000031EC                          3782              
000031EC  6000 0014               3783              BRA     EXIT  
000031F0                          3784              
000031F0                          3785  INVAL_EA_NO_RTS
000031F0                          3786             
000031F0  43F9 000033CB           3787              LEA     MSG_INV_EA,A1
000031F6  4E4F                    3788              TRAP    #15
000031F8                          3789              
000031F8  244C                    3790              MOVEA.L A4,A2           *move A3 to A2 since absolute address may have been used
000031FA  548A                    3791              ADDA.L  #$2,A2          * Increase counter by long
000031FC  4287                    3792              CLR.L   D7
000031FE  6000 E038               3793              BRA     INCREMENT            
00003202                          3794              
00003202                          3795              
00003202                          3796              
00003202                          3797  EXIT        
00003202  4E75                    3798              RTS            
00003204                          3799                
00003204                          3800                   
00003204                          3801              
00003204                          3802  
00003204  43F9 000033F2           3803  END         LEA     NEW_LOAD,A1
0000320A  103C 000E               3804              MOVE.B  #14,D0
0000320E  4E4F                    3805              TRAP    #15
00003210                          3806              
00003210                          3807              
00003210  103C 0005               3808              MOVE.B  #5,D0
00003214  4E4F                    3809              TRAP    #15
00003216                          3810              
00003216  B23C 0079               3811              CMP.B   #$79,D1
0000321A  6700 0006               3812              BEQ     PREP_FOR_START
0000321E  FFFF FFFF               3813              SIMHALT
00003222                          3814              
00003222                          3815  PREP_FOR_START            
00003222  43F9 000033E6           3816              LEA     BLANK,A1
00003228  103C 000E               3817              MOVE.B  #14,D0
0000322C  4E4F                    3818              TRAP    #15
0000322E                          3819              
0000322E                          3820  
0000322E                          3821              
0000322E  6000 DDD0               3822              BRA     START
00003232                          3823  
00003232                          3824  
00003232                          3825  
00003232                          3826  
00003232                          3827              
00003232                          3828              
00003232                          3829              
00003232                          3830  * ----------------ASCII Codes-----------------
00003232  =0000000D               3831  CR          EQU     $0D             * ASCII code for Carriage Return
00003232  =0000000A               3832  LF          EQU     $0A             * ASCII code for Line Feed
00003232                          3833  
00003232                          3834  * -------Defined Messages and Variables-------
00003232= 50 6C 65 61 73 65 ...   3835  DIRECTIONS  DC.B    'Please Enter 6-Digit Hex Address Between 000000 & FFFFF0.',CR,LF,0
0000326E= 45 6E 74 65 72 20 ...   3836  PROMPT1     DC.B    'Enter Startng Address: ',0
00003286= 45 6E 74 65 72 20 ...   3837  PROMPT2     DC.B    'Enter Ending Address: ',0
0000329D= 49 6E 63 6F 72 72 ...   3838  ERROR_MSG   DC.B    'Incorrect address input. Please re-enter.',CR,LF,0
000032C9= 43 6F 6E 74 69 6E ...   3839  ASK         DC.B    'Continue Reading File, Press Enter!',0
000032ED= 20 20 20 52 54 53 00    3840  MSG_RTS     DC.B    '   RTS',0
000032F4= 20 20 20 4A 53 52 00    3841  MSG_JSR     DC.B    '   JSR',0
000032FB= 20 20 20 44 41 54 ...   3842  UNKNOWN     DC.B    '   DATA',0
00003303= 20 44 41 54 41 00       3843  MOVEMDATA   DC.B    ' DATA',0
00003309= 30 00                   3844  ZERO        DC.B    '0',0
0000330B= 20 20 20 00             3845  SPACE       DC.B    '   ',0
0000330F= 20 20 00                3846  SM_SPACE    DC.B    '  ',0
00003312= 20 00                   3847  T_SPACE     DC.B    ' ',0
00003314= 20 20 20 4C 53 4C 00    3848  MSG_LSL     DC.B    '   LSL',0
0000331B= 20 20 20 4C 53 52 00    3849  MSG_LSR     DC.B    '   LSR',0
00003322= 20 20 20 41 53 4C 00    3850  MSG_ASL     DC.B    '   ASL',0
00003329= 20 20 20 41 53 52 00    3851  MSG_ASR     DC.B    '   ASR',0
00003330= 20 20 20 4E 4F 54 00    3852  MSG_NOT     DC.B    '   NOT',0
00003337= 20 20 20 42 52 41 00    3853  MSG_BRA     DC.B    '   BRA',0
0000333E= 20 20 20 42 47 54 00    3854  MSG_BGT     DC.B    '   BGT',0
00003345= 20 20 20 42 4C 45 00    3855  MSG_BLE     DC.B    '   BLE',0
0000334C= 20 20 20 42 45 51 00    3856  MSG_BEQ     DC.B    '   BEQ',0
00003353= 20 20 20 52 4F 52 00    3857  MSG_ROR     DC.B    '   ROR',0
0000335A= 20 20 20 52 4F 4C 00    3858  MSG_ROL     DC.B    '   ROL',0
00003361= 20 20 20 4E 4F 50 00    3859  MSG_NOP     DC.B    '   NOP',0
00003368= 20 20 20 4D 4F 56 ...   3860  MSG_MOVEM    DC.B    '   MOVEM',0
00003371= 20 20 20 4D 4F 56 ...   3861  MSG_MOVEQ   DC.B    '   MOVEQ',0
0000337A= 20 20 20 4D 4F 56 ...   3862  MSG_MOVE    DC.B    '   MOVE',0
00003382= 2E 42 20 00             3863  MSG_BYTE    DC.B    '.B ',0
00003386= 2E 57 20 00             3864  MSG_WORD    DC.B    '.W ',0
0000338A= 2E 4C 20 00             3865  MSG_LONG    DC.B    '.L ',0
0000338E= 2C 00                   3866  MSG_COMMA   DC.B    ',',0
00003390= 20 20 20 4D 4F 56 ...   3867  MSG_MOVEA   DC.B    '   MOVEA',0
00003399= 20 20 20 41 44 44 00    3868  MSG_ADD     DC.B    '   ADD',0
000033A0= 20 20 20 41 44 44 ...   3869  MSG_ADDA    DC.B    '   ADDA',0
000033A8= 20 20 20 41 44 44 ...   3870  MSG_ADDQ    DC.B    '   ADDQ',0
000033B0= 20 20 20 53 55 42 00    3871  MSG_SUB     DC.B    '   SUB',0
000033B7= 20 20 20 4C 45 41 00    3872  MSG_LEA     DC.B    '   LEA',0
000033BE= 20 20 20 41 4E 44 00    3873  MSG_AND     DC.B    '   AND',0
000033C5= 20 20 20 4F 52 00       3874  MSG_OR      DC.B    '   OR',0
000033CB= 49 4E 56 41 4C 49 ...   3875  MSG_INV_EA  DC.B    'INVALID EA',0
000033D6= 44 00                   3876  MSG_D       DC.B    'D',0
000033D8= 41 00                   3877  MSG_A       DC.B    'A',0
000033DA= 28 00                   3878  L_PAREN     DC.B    '(',0
000033DC= 29 00                   3879  R_PAREN     DC.B    ')',0
000033DE= 24 00                   3880  HEX_SIGN    DC.B    '$',0
000033E0= 23 00                   3881  HASH_SIGN   DC.B    '#',0
000033E2= 2B 00                   3882  PLUS        DC.B    '+',0
000033E4= 2D 00                   3883  MINUS       DC.B    '-',0
000033E6= 20 0D 0A 00             3884  BLANK       DC.B    ' ',CR,LF,0
000033EA                          3885  BEGIN       DS.L    1
000033EE                          3886  FIN         DS.L    1
000033F2= 41 6E 6F 74 68 65 ...   3887  NEW_LOAD    DC.B    'Another memory image? y or n',0
0000340F                          3888  
0000340F                          3889  
0000340F                          3890  
0000340F                          3891  
0000340F                          3892              END    START 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_IMM_DATA_S     1ACE
ADDA_P_SRC_EA       1A6C
ADDA_SIZE_SUB       1B4E
ADDQ_DATA_SUB       1C0C
ADDQ_SIZE_SUB       1BEE
ADDY_R_DNP          2F90
ADDY_R_DP           2FF0
ADDY_R_DPD          3108
ADDY_R_DPI          3076
ADDY_R_SNP          2F6C
ADDY_R_SP           2FB4
ADDY_R_SPD          30C0
ADDY_R_SPI          302E
ADD_SIZE_SUB        19A2
AI_M_S              1AAA
AL                  1830
AND_ADDY_R_SNP      2C9C
AND_IMM_DATA_S      2C5E
AND_IMM_REG_D       2CC8
AND_IMM_REG_S       2C3A
AND_PRINT_DEST_EA   2C04
AND_PRINT_SRC_EA    2BCC
AND_SIZE_SUB        294A
ASHIFT              17E8
ASK                 32C9
ASK_CONTINUE        1252
BEGIN               33EA
BLANK               33E6
BYTE                31B8
CHARACTER1          1070
CHARACTER2          10AA
CHECK               10BE
COMBINE1            1074
COMBINE2            10AE
CONVERTHEX1         1052
CONVERTHEX2         108C
CR                  D
DATA_R_D            3176
DATA_R_S            3152
DEST_AND_EA         2B66
DEST_SUBTR_EA       1F9A
DIRECTIONS          3232
DONE                1112
EA_BEQ_WORD         2516
EA_BGT_WORD         242E
EA_BLE_WORD         24A2
EA_BRA_WORD         1692
EA_JSR_ABS          135E
EA_JSR_ADDREG       12F4
EA_JSR_LONG         138E
EA_MEM_ABS          2810
EA_MEM_ABS_LONG     2846
EA_MEM_ADDREG       2734
EA_MEM_POST         2778
EA_MEM_PRE          27C4
EA_MEM_SHIFT_ROTATE  26FA
EA_SHIFT_ROTATE     2882
END                 3204
ERROR_MSG           329D
EXIT                3202
FIN                 33EE
F_AND_DN            2BA6
F_SUBTR_DN          1FDA
F_SUBTR_DN_SRC      2000
GOOD                2E0C
HASH_SIGN           33E0
HEX_SIGN            33DE
IMM_DATA_S          2EDE
IMM_DATA_SL         2F02
IMM_DATA_SW         2F28
IMM_REG_D           2F4C
IMM_REG_FSIXB       1CC6
IMM_REG_S           2E78
INCREMENT           1238
INITHEX2            1084
INPUT_ERR           10EE
INVALID_EA          31E8
INVAL_EA_NO_RTS     31F0
LEAS_IMM_REG        2308
LEA_EAS             22CA
LF                  A
LL                  17AA
LONG                31D8
LSHIFT              1762
L_ADDY              2EBC
L_PAREN             33DA
MAIN_LOOP           112A
MATCH_ADD           18F2
MATCH_ADDA          19DC
MATCH_ADDQ          1B68
MATCH_AND           2144
MATCH_BCC           23C4
MATCH_BEQ           24CC
MATCH_BGT           23E4
MATCH_BLE           2458
MATCH_BRA           1648
MATCH_JSR           12B2
MATCH_LEA           21E4
MATCH_MEMASHIFTL    14DE
MATCH_MEMASHIFTR    14A4
MATCH_MEMLSHIFTL    146A
MATCH_MEMLSHIFTR    1430
MATCH_MEMROL        13F6
MATCH_MEMROR        13BC
MATCH_MOVE          2540
MATCH_MOVEA         25F6
MATCH_MOVEM         269A
MATCH_MOVEQ         186E
MATCH_NOP           1296
MATCH_NOT           1518
MATCH_OR            2324
MATCH_RTS           127A
MATCH_SHIFT         16BC
MATCH_SIZE_LAR      31A0
MATCH_SIZE_MEMLAR   319C
MATCH_SUB           1CE2
MINUS               33E4
MOVEA_SIZE_SUB      2D04
MOVEMDATA           3303
MOVEM_SIZE_SUB      2D1C
MOVE_MODE_DEST      2E46
MOVE_SIZE_SUB       2CE4
MSG_A               33D8
MSG_ADD             3399
MSG_ADDA            33A0
MSG_ADDQ            33A8
MSG_AND             33BE
MSG_ASL             3322
MSG_ASR             3329
MSG_BEQ             334C
MSG_BGT             333E
MSG_BLE             3345
MSG_BRA             3337
MSG_BYTE            3382
MSG_COMMA           338E
MSG_D               33D6
MSG_INV_EA          33CB
MSG_JSR             32F4
MSG_LEA             33B7
MSG_LONG            338A
MSG_LSL             3314
MSG_LSR             331B
MSG_MOVE            337A
MSG_MOVEA           3390
MSG_MOVEM           3368
MSG_MOVEQ           3371
MSG_NOP             3361
MSG_NOT             3330
MSG_OR              33C5
MSG_ROL             335A
MSG_ROR             3353
MSG_RTS             32ED
MSG_SUB             33B0
MSG_WORD            3386
NEW_LOAD            33F2
NOOP                11FE
NOT_EA              15EE
NOT_IMM_REG         162C
NUMBER1             1068
NUMBER2             10A2
PLUS                33E2
PREP_FOR_START      3222
PRINT_EA_FSIXB      1C8E
PRINT_SRC_EA        2E0E
PROMPT1             326E
PROMPT2             3286
REG_SHIFT           28F4
RL                  1724
ROTATE              16DC
R_PAREN             33DC
SHIFT_DEST          292A
SHIFT_EIGHT         28D6
SIZE_NOT            157A
SM_SPACE            330F
SOURCE_AND_EA       2B28
SOURCE_SUBTR_EA     1F5C
SPACE               330B
START               1000
START_PRG           1000
SUBTR_ADDY_R_SNP    20FC
SUBTR_IMM_DATA_S    20BE
SUBTR_IMM_REG_D     2128
SUBTR_IMM_REG_S     209A
SUBTR_PRINT_DEST_EA  205E
SUBTR_PRINT_SRC_EA  2026
SUBT_SIZE_SUB       1D7E
T_ADDA_IMM_REG_S    1B2A
T_ADDA_PRINT_SRC_EA  1AEC
T_AND_ADDY_R_SNP    2AE0
T_AND_IMM_DATA_S    2AA4
T_AND_IMM_REG_D     2B0C
T_AND_IMM_REG_S     2A80
T_AND_PRINT_DEST_EA  2A44
T_AND_PRINT_SRC_EA  2A06
T_DEST_AND_EA       29C6
T_DEST_SUBTR_EA     1DFA
T_IMM_DATA_S        2DCA
T_IMM_REG_D         2DEC
T_IMM_REG_FSIXB     1C72
T_IMM_REG_S         2DA6
T_LEAS_EA           2270
T_LEAS_IMM_REG      22AE
T_MOVE_MODE_DEST    2D6C
T_NOT_EA            1594
T_NOT_IMM_REG       15D2
T_PRINT_EA_FSIXB    1C38
T_PRINT_SRC_EA      2D34
T_SOURCE_AND_EA     2988
T_SOURCE_SUBTR_EA   1DBC
T_SPACE             3312
T_SUBTR_ADDY_R_SNP  1F14
T_SUBTR_IMM_DATA_S  1ED8
T_SUBTR_IMM_REG_D   1F40
T_SUBTR_IMM_REG_S   1EB4
T_SUBTR_PRINT_DEST_EA  1E78
T_SUBTR_PRINT_SRC_EA  1E3A
UNKNOWN             32FB
USER_INPUT          1260
VERIFY_ABS          1334
WORD                31C8
W_ADDY              2E9C
ZERO                3309
